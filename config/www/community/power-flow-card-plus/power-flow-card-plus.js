function e(e, t, o, i) { var a, r = arguments.length, n = r < 3 ? t : null === i ? i = Object.getOwnPropertyDescriptor(t, o) : i; if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(e, t, o, i); else for (var l = e.length - 1; l >= 0; l--)(a = e[l]) && (n = (r < 3 ? a(n) : r > 3 ? a(t, o, n) : a(t, o)) || n); return r > 3 && n && Object.defineProperty(t, o, n), n } var t, o; function i() { return (i = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) { var o = arguments[t]; for (var i in o) Object.prototype.hasOwnProperty.call(o, i) && (e[i] = o[i]) } return e }).apply(this, arguments) } "function" == typeof SuppressedError && SuppressedError, function (e) { e.language = "language", e.system = "system", e.comma_decimal = "comma_decimal", e.decimal_comma = "decimal_comma", e.space_comma = "space_comma", e.none = "none" }(t || (t = {})), function (e) { e.language = "language", e.system = "system", e.am_pm = "12", e.twenty_four = "24" }(o || (o = {})); var a = function (e, o, i) { var a = o ? function (e) { switch (e.number_format) { case t.comma_decimal: return ["en-US", "en"]; case t.decimal_comma: return ["de", "es", "it"]; case t.space_comma: return ["fr", "sv", "cs"]; case t.system: return; default: return e.language } }(o) : void 0; if (Number.isNaN = Number.isNaN || function e(t) { return "number" == typeof t && e(t) }, (null == o ? void 0 : o.number_format) !== t.none && !Number.isNaN(Number(e)) && Intl) try { return new Intl.NumberFormat(a, r(e, i)).format(Number(e)) } catch (t) { return console.error(t), new Intl.NumberFormat(void 0, r(e, i)).format(Number(e)) } return "string" == typeof e ? e : function (e, t) { return void 0 === t && (t = 2), Math.round(e * Math.pow(10, t)) / Math.pow(10, t) }(e, null == i ? void 0 : i.maximumFractionDigits).toString() + ("currency" === (null == i ? void 0 : i.style) ? " " + i.currency : "") }, r = function (e, t) { var o = i({ maximumFractionDigits: 2 }, t); if ("string" != typeof e) return o; if (!t || !t.minimumFractionDigits && !t.maximumFractionDigits) { var a = e.indexOf(".") > -1 ? e.split(".")[1].length : 0; o.minimumFractionDigits = a, o.maximumFractionDigits = a } return o }; const n = window, l = n.ShadowRoot && (void 0 === n.ShadyCSS || n.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, s = Symbol(), d = new WeakMap; class c { constructor(e, t, o) { if (this._$cssResult$ = !0, o !== s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead."); this.cssText = e, this.t = t } get styleSheet() { let e = this.o; const t = this.t; if (l && void 0 === e) { const o = void 0 !== t && 1 === t.length; o && (e = d.get(t)), void 0 === e && ((this.o = e = new CSSStyleSheet).replaceSync(this.cssText), o && d.set(t, e)) } return e } toString() { return this.cssText } } const u = (e, ...t) => { const o = 1 === e.length ? e[0] : t.reduce(((t, o, i) => t + (e => { if (!0 === e._$cssResult$) return e.cssText; if ("number" == typeof e) return e; throw Error("Value passed to 'css' function must be a 'css' function result: " + e + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.") })(o) + e[i + 1]), e[0]); return new c(o, e, s) }, _ = l ? e => e : e => e instanceof CSSStyleSheet ? (e => { let t = ""; for (const o of e.cssRules) t += o.cssText; return (e => new c("string" == typeof e ? e : e + "", void 0, s))(t) })(e) : e; var v; const p = window, h = p.trustedTypes, y = h ? h.emptyScript : "", m = p.reactiveElementPolyfillSupport, f = { toAttribute(e, t) { switch (t) { case Boolean: e = e ? y : null; break; case Object: case Array: e = null == e ? e : JSON.stringify(e) }return e }, fromAttribute(e, t) { let o = e; switch (t) { case Boolean: o = null !== e; break; case Number: o = null === e ? null : Number(e); break; case Object: case Array: try { o = JSON.parse(e) } catch (e) { o = null } }return o } }, g = (e, t) => t !== e && (t == t || e == e), b = { attribute: !0, type: String, converter: f, reflect: !1, hasChanged: g }, w = "finalized"; class x extends HTMLElement { constructor() { super(), this._$Ei = new Map, this.isUpdatePending = !1, this.hasUpdated = !1, this._$El = null, this._$Eu() } static addInitializer(e) { var t; this.finalize(), (null !== (t = this.h) && void 0 !== t ? t : this.h = []).push(e) } static get observedAttributes() { this.finalize(); const e = []; return this.elementProperties.forEach(((t, o) => { const i = this._$Ep(o, t); void 0 !== i && (this._$Ev.set(i, o), e.push(i)) })), e } static createProperty(e, t = b) { if (t.state && (t.attribute = !1), this.finalize(), this.elementProperties.set(e, t), !t.noAccessor && !this.prototype.hasOwnProperty(e)) { const o = "symbol" == typeof e ? Symbol() : "__" + e, i = this.getPropertyDescriptor(e, o, t); void 0 !== i && Object.defineProperty(this.prototype, e, i) } } static getPropertyDescriptor(e, t, o) { return { get() { return this[t] }, set(i) { const a = this[e]; this[t] = i, this.requestUpdate(e, a, o) }, configurable: !0, enumerable: !0 } } static getPropertyOptions(e) { return this.elementProperties.get(e) || b } static finalize() { if (this.hasOwnProperty(w)) return !1; this[w] = !0; const e = Object.getPrototypeOf(this); if (e.finalize(), void 0 !== e.h && (this.h = [...e.h]), this.elementProperties = new Map(e.elementProperties), this._$Ev = new Map, this.hasOwnProperty("properties")) { const e = this.properties, t = [...Object.getOwnPropertyNames(e), ...Object.getOwnPropertySymbols(e)]; for (const o of t) this.createProperty(o, e[o]) } return this.elementStyles = this.finalizeStyles(this.styles), !0 } static finalizeStyles(e) { const t = []; if (Array.isArray(e)) { const o = new Set(e.flat(1 / 0).reverse()); for (const e of o) t.unshift(_(e)) } else void 0 !== e && t.push(_(e)); return t } static _$Ep(e, t) { const o = t.attribute; return !1 === o ? void 0 : "string" == typeof o ? o : "string" == typeof e ? e.toLowerCase() : void 0 } _$Eu() { var e; this._$E_ = new Promise((e => this.enableUpdating = e)), this._$AL = new Map, this._$Eg(), this.requestUpdate(), null === (e = this.constructor.h) || void 0 === e || e.forEach((e => e(this))) } addController(e) { var t, o; (null !== (t = this._$ES) && void 0 !== t ? t : this._$ES = []).push(e), void 0 !== this.renderRoot && this.isConnected && (null === (o = e.hostConnected) || void 0 === o || o.call(e)) } removeController(e) { var t; null === (t = this._$ES) || void 0 === t || t.splice(this._$ES.indexOf(e) >>> 0, 1) } _$Eg() { this.constructor.elementProperties.forEach(((e, t) => { this.hasOwnProperty(t) && (this._$Ei.set(t, this[t]), delete this[t]) })) } createRenderRoot() { var e; const t = null !== (e = this.shadowRoot) && void 0 !== e ? e : this.attachShadow(this.constructor.shadowRootOptions); return ((e, t) => { l ? e.adoptedStyleSheets = t.map((e => e instanceof CSSStyleSheet ? e : e.styleSheet)) : t.forEach((t => { const o = document.createElement("style"), i = n.litNonce; void 0 !== i && o.setAttribute("nonce", i), o.textContent = t.cssText, e.appendChild(o) })) })(t, this.constructor.elementStyles), t } connectedCallback() { var e; void 0 === this.renderRoot && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), null === (e = this._$ES) || void 0 === e || e.forEach((e => { var t; return null === (t = e.hostConnected) || void 0 === t ? void 0 : t.call(e) })) } enableUpdating(e) { } disconnectedCallback() { var e; null === (e = this._$ES) || void 0 === e || e.forEach((e => { var t; return null === (t = e.hostDisconnected) || void 0 === t ? void 0 : t.call(e) })) } attributeChangedCallback(e, t, o) { this._$AK(e, o) } _$EO(e, t, o = b) { var i; const a = this.constructor._$Ep(e, o); if (void 0 !== a && !0 === o.reflect) { const r = (void 0 !== (null === (i = o.converter) || void 0 === i ? void 0 : i.toAttribute) ? o.converter : f).toAttribute(t, o.type); this._$El = e, null == r ? this.removeAttribute(a) : this.setAttribute(a, r), this._$El = null } } _$AK(e, t) { var o; const i = this.constructor, a = i._$Ev.get(e); if (void 0 !== a && this._$El !== a) { const e = i.getPropertyOptions(a), r = "function" == typeof e.converter ? { fromAttribute: e.converter } : void 0 !== (null === (o = e.converter) || void 0 === o ? void 0 : o.fromAttribute) ? e.converter : f; this._$El = a, this[a] = r.fromAttribute(t, e.type), this._$El = null } } requestUpdate(e, t, o) { let i = !0; void 0 !== e && (((o = o || this.constructor.getPropertyOptions(e)).hasChanged || g)(this[e], t) ? (this._$AL.has(e) || this._$AL.set(e, t), !0 === o.reflect && this._$El !== e && (void 0 === this._$EC && (this._$EC = new Map), this._$EC.set(e, o))) : i = !1), !this.isUpdatePending && i && (this._$E_ = this._$Ej()) } async _$Ej() { this.isUpdatePending = !0; try { await this._$E_ } catch (e) { Promise.reject(e) } const e = this.scheduleUpdate(); return null != e && await e, !this.isUpdatePending } scheduleUpdate() { return this.performUpdate() } performUpdate() { var e; if (!this.isUpdatePending) return; this.hasUpdated, this._$Ei && (this._$Ei.forEach(((e, t) => this[t] = e)), this._$Ei = void 0); let t = !1; const o = this._$AL; try { t = this.shouldUpdate(o), t ? (this.willUpdate(o), null === (e = this._$ES) || void 0 === e || e.forEach((e => { var t; return null === (t = e.hostUpdate) || void 0 === t ? void 0 : t.call(e) })), this.update(o)) : this._$Ek() } catch (e) { throw t = !1, this._$Ek(), e } t && this._$AE(o) } willUpdate(e) { } _$AE(e) { var t; null === (t = this._$ES) || void 0 === t || t.forEach((e => { var t; return null === (t = e.hostUpdated) || void 0 === t ? void 0 : t.call(e) })), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(e)), this.updated(e) } _$Ek() { this._$AL = new Map, this.isUpdatePending = !1 } get updateComplete() { return this.getUpdateComplete() } getUpdateComplete() { return this._$E_ } shouldUpdate(e) { return !0 } update(e) { void 0 !== this._$EC && (this._$EC.forEach(((e, t) => this._$EO(t, this[t], e))), this._$EC = void 0), this._$Ek() } updated(e) { } firstUpdated(e) { } } var k; x[w] = !0, x.elementProperties = new Map, x.elementStyles = [], x.shadowRootOptions = { mode: "open" }, null == m || m({ ReactiveElement: x }), (null !== (v = p.reactiveElementVersions) && void 0 !== v ? v : p.reactiveElementVersions = []).push("1.6.3"); const $ = window, z = $.trustedTypes, E = z ? z.createPolicy("lit-html", { createHTML: e => e }) : void 0, S = "$lit$", C = `lit$${(Math.random() + "").slice(9)}$`, M = "?" + C, A = `<${M}>`, P = document, D = () => P.createComment(""), T = e => null === e || "object" != typeof e && "function" != typeof e, O = Array.isArray, j = "[ \t\n\f\r]", N = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, G = /-->/g, B = />/g, F = RegExp(`>|${j}(?:([^\\s"'>=/]+)(${j}*=${j}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`, "g"), I = /'/g, R = /"/g, H = /^(?:script|style|textarea|title)$/i, L = e => (t, ...o) => ({ _$litType$: e, strings: t, values: o }), U = L(1), W = L(2), V = Symbol.for("lit-noChange"), Z = Symbol.for("lit-nothing"), K = new WeakMap, Y = P.createTreeWalker(P, 129, null, !1); function J(e, t) { if (!Array.isArray(e) || !e.hasOwnProperty("raw")) throw Error("invalid template strings array"); return void 0 !== E ? E.createHTML(t) : t } const q = (e, t) => { const o = e.length - 1, i = []; let a, r = 2 === t ? "<svg>" : "", n = N; for (let t = 0; t < o; t++) { const o = e[t]; let l, s, d = -1, c = 0; for (; c < o.length && (n.lastIndex = c, s = n.exec(o), null !== s);)c = n.lastIndex, n === N ? "!--" === s[1] ? n = G : void 0 !== s[1] ? n = B : void 0 !== s[2] ? (H.test(s[2]) && (a = RegExp("</" + s[2], "g")), n = F) : void 0 !== s[3] && (n = F) : n === F ? ">" === s[0] ? (n = null != a ? a : N, d = -1) : void 0 === s[1] ? d = -2 : (d = n.lastIndex - s[2].length, l = s[1], n = void 0 === s[3] ? F : '"' === s[3] ? R : I) : n === R || n === I ? n = F : n === G || n === B ? n = N : (n = F, a = void 0); const u = n === F && e[t + 1].startsWith("/>") ? " " : ""; r += n === N ? o + A : d >= 0 ? (i.push(l), o.slice(0, d) + S + o.slice(d) + C + u) : o + C + (-2 === d ? (i.push(void 0), t) : u) } return [J(e, r + (e[o] || "<?>") + (2 === t ? "</svg>" : "")), i] }; class Q { constructor({ strings: e, _$litType$: t }, o) { let i; this.parts = []; let a = 0, r = 0; const n = e.length - 1, l = this.parts, [s, d] = q(e, t); if (this.el = Q.createElement(s, o), Y.currentNode = this.el.content, 2 === t) { const e = this.el.content, t = e.firstChild; t.remove(), e.append(...t.childNodes) } for (; null !== (i = Y.nextNode()) && l.length < n;) { if (1 === i.nodeType) { if (i.hasAttributes()) { const e = []; for (const t of i.getAttributeNames()) if (t.endsWith(S) || t.startsWith(C)) { const o = d[r++]; if (e.push(t), void 0 !== o) { const e = i.getAttribute(o.toLowerCase() + S).split(C), t = /([.?@])?(.*)/.exec(o); l.push({ type: 1, index: a, name: t[2], strings: e, ctor: "." === t[1] ? ie : "?" === t[1] ? re : "@" === t[1] ? ne : oe }) } else l.push({ type: 6, index: a }) } for (const t of e) i.removeAttribute(t) } if (H.test(i.tagName)) { const e = i.textContent.split(C), t = e.length - 1; if (t > 0) { i.textContent = z ? z.emptyScript : ""; for (let o = 0; o < t; o++)i.append(e[o], D()), Y.nextNode(), l.push({ type: 2, index: ++a }); i.append(e[t], D()) } } } else if (8 === i.nodeType) if (i.data === M) l.push({ type: 2, index: a }); else { let e = -1; for (; -1 !== (e = i.data.indexOf(C, e + 1));)l.push({ type: 7, index: a }), e += C.length - 1 } a++ } } static createElement(e, t) { const o = P.createElement("template"); return o.innerHTML = e, o } } function X(e, t, o = e, i) { var a, r, n, l; if (t === V) return t; let s = void 0 !== i ? null === (a = o._$Co) || void 0 === a ? void 0 : a[i] : o._$Cl; const d = T(t) ? void 0 : t._$litDirective$; return (null == s ? void 0 : s.constructor) !== d && (null === (r = null == s ? void 0 : s._$AO) || void 0 === r || r.call(s, !1), void 0 === d ? s = void 0 : (s = new d(e), s._$AT(e, o, i)), void 0 !== i ? (null !== (n = (l = o)._$Co) && void 0 !== n ? n : l._$Co = [])[i] = s : o._$Cl = s), void 0 !== s && (t = X(e, s._$AS(e, t.values), s, i)), t } class ee { constructor(e, t) { this._$AV = [], this._$AN = void 0, this._$AD = e, this._$AM = t } get parentNode() { return this._$AM.parentNode } get _$AU() { return this._$AM._$AU } u(e) { var t; const { el: { content: o }, parts: i } = this._$AD, a = (null !== (t = null == e ? void 0 : e.creationScope) && void 0 !== t ? t : P).importNode(o, !0); Y.currentNode = a; let r = Y.nextNode(), n = 0, l = 0, s = i[0]; for (; void 0 !== s;) { if (n === s.index) { let t; 2 === s.type ? t = new te(r, r.nextSibling, this, e) : 1 === s.type ? t = new s.ctor(r, s.name, s.strings, this, e) : 6 === s.type && (t = new le(r, this, e)), this._$AV.push(t), s = i[++l] } n !== (null == s ? void 0 : s.index) && (r = Y.nextNode(), n++) } return Y.currentNode = P, a } v(e) { let t = 0; for (const o of this._$AV) void 0 !== o && (void 0 !== o.strings ? (o._$AI(e, o, t), t += o.strings.length - 2) : o._$AI(e[t])), t++ } } class te { constructor(e, t, o, i) { var a; this.type = 2, this._$AH = Z, this._$AN = void 0, this._$AA = e, this._$AB = t, this._$AM = o, this.options = i, this._$Cp = null === (a = null == i ? void 0 : i.isConnected) || void 0 === a || a } get _$AU() { var e, t; return null !== (t = null === (e = this._$AM) || void 0 === e ? void 0 : e._$AU) && void 0 !== t ? t : this._$Cp } get parentNode() { let e = this._$AA.parentNode; const t = this._$AM; return void 0 !== t && 11 === (null == e ? void 0 : e.nodeType) && (e = t.parentNode), e } get startNode() { return this._$AA } get endNode() { return this._$AB } _$AI(e, t = this) { e = X(this, e, t), T(e) ? e === Z || null == e || "" === e ? (this._$AH !== Z && this._$AR(), this._$AH = Z) : e !== this._$AH && e !== V && this._(e) : void 0 !== e._$litType$ ? this.g(e) : void 0 !== e.nodeType ? this.$(e) : (e => O(e) || "function" == typeof (null == e ? void 0 : e[Symbol.iterator]))(e) ? this.T(e) : this._(e) } k(e) { return this._$AA.parentNode.insertBefore(e, this._$AB) } $(e) { this._$AH !== e && (this._$AR(), this._$AH = this.k(e)) } _(e) { this._$AH !== Z && T(this._$AH) ? this._$AA.nextSibling.data = e : this.$(P.createTextNode(e)), this._$AH = e } g(e) { var t; const { values: o, _$litType$: i } = e, a = "number" == typeof i ? this._$AC(e) : (void 0 === i.el && (i.el = Q.createElement(J(i.h, i.h[0]), this.options)), i); if ((null === (t = this._$AH) || void 0 === t ? void 0 : t._$AD) === a) this._$AH.v(o); else { const e = new ee(a, this), t = e.u(this.options); e.v(o), this.$(t), this._$AH = e } } _$AC(e) { let t = K.get(e.strings); return void 0 === t && K.set(e.strings, t = new Q(e)), t } T(e) { O(this._$AH) || (this._$AH = [], this._$AR()); const t = this._$AH; let o, i = 0; for (const a of e) i === t.length ? t.push(o = new te(this.k(D()), this.k(D()), this, this.options)) : o = t[i], o._$AI(a), i++; i < t.length && (this._$AR(o && o._$AB.nextSibling, i), t.length = i) } _$AR(e = this._$AA.nextSibling, t) { var o; for (null === (o = this._$AP) || void 0 === o || o.call(this, !1, !0, t); e && e !== this._$AB;) { const t = e.nextSibling; e.remove(), e = t } } setConnected(e) { var t; void 0 === this._$AM && (this._$Cp = e, null === (t = this._$AP) || void 0 === t || t.call(this, e)) } } class oe { constructor(e, t, o, i, a) { this.type = 1, this._$AH = Z, this._$AN = void 0, this.element = e, this.name = t, this._$AM = i, this.options = a, o.length > 2 || "" !== o[0] || "" !== o[1] ? (this._$AH = Array(o.length - 1).fill(new String), this.strings = o) : this._$AH = Z } get tagName() { return this.element.tagName } get _$AU() { return this._$AM._$AU } _$AI(e, t = this, o, i) { const a = this.strings; let r = !1; if (void 0 === a) e = X(this, e, t, 0), r = !T(e) || e !== this._$AH && e !== V, r && (this._$AH = e); else { const i = e; let n, l; for (e = a[0], n = 0; n < a.length - 1; n++)l = X(this, i[o + n], t, n), l === V && (l = this._$AH[n]), r || (r = !T(l) || l !== this._$AH[n]), l === Z ? e = Z : e !== Z && (e += (null != l ? l : "") + a[n + 1]), this._$AH[n] = l } r && !i && this.j(e) } j(e) { e === Z ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != e ? e : "") } } class ie extends oe { constructor() { super(...arguments), this.type = 3 } j(e) { this.element[this.name] = e === Z ? void 0 : e } } const ae = z ? z.emptyScript : ""; class re extends oe { constructor() { super(...arguments), this.type = 4 } j(e) { e && e !== Z ? this.element.setAttribute(this.name, ae) : this.element.removeAttribute(this.name) } } class ne extends oe { constructor(e, t, o, i, a) { super(e, t, o, i, a), this.type = 5 } _$AI(e, t = this) { var o; if ((e = null !== (o = X(this, e, t, 0)) && void 0 !== o ? o : Z) === V) return; const i = this._$AH, a = e === Z && i !== Z || e.capture !== i.capture || e.once !== i.once || e.passive !== i.passive, r = e !== Z && (i === Z || a); a && this.element.removeEventListener(this.name, this, i), r && this.element.addEventListener(this.name, this, e), this._$AH = e } handleEvent(e) { var t, o; "function" == typeof this._$AH ? this._$AH.call(null !== (o = null === (t = this.options) || void 0 === t ? void 0 : t.host) && void 0 !== o ? o : this.element, e) : this._$AH.handleEvent(e) } } class le { constructor(e, t, o) { this.element = e, this.type = 6, this._$AN = void 0, this._$AM = t, this.options = o } get _$AU() { return this._$AM._$AU } _$AI(e) { X(this, e) } } const se = $.litHtmlPolyfillSupport; null == se || se(Q, te), (null !== (k = $.litHtmlVersions) && void 0 !== k ? k : $.litHtmlVersions = []).push("2.8.0"); var de, ce; class ue extends x { constructor() { super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0 } createRenderRoot() { var e, t; const o = super.createRenderRoot(); return null !== (e = (t = this.renderOptions).renderBefore) && void 0 !== e || (t.renderBefore = o.firstChild), o } update(e) { const t = this.render(); this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(e), this._$Do = ((e, t, o) => { var i, a; const r = null !== (i = null == o ? void 0 : o.renderBefore) && void 0 !== i ? i : t; let n = r._$litPart$; if (void 0 === n) { const e = null !== (a = null == o ? void 0 : o.renderBefore) && void 0 !== a ? a : null; r._$litPart$ = n = new te(t.insertBefore(D(), e), e, void 0, null != o ? o : {}) } return n._$AI(e), n })(t, this.renderRoot, this.renderOptions) } connectedCallback() { var e; super.connectedCallback(), null === (e = this._$Do) || void 0 === e || e.setConnected(!0) } disconnectedCallback() { var e; super.disconnectedCallback(), null === (e = this._$Do) || void 0 === e || e.setConnected(!1) } render() { return V } } ue.finalized = !0, ue._$litElement$ = !0, null === (de = globalThis.litElementHydrateSupport) || void 0 === de || de.call(globalThis, { LitElement: ue }); const _e = globalThis.litElementPolyfillSupport; null == _e || _e({ LitElement: ue }), (null !== (ce = globalThis.litElementVersions) && void 0 !== ce ? ce : globalThis.litElementVersions = []).push("3.3.3"); const ve = e => t => "function" == typeof t ? ((e, t) => (customElements.define(e, t), t))(e, t) : ((e, t) => { const { kind: o, elements: i } = t; return { kind: o, elements: i, finisher(t) { customElements.define(e, t) } } })(e, t), pe = (e, t) => "method" === t.kind && t.descriptor && !("value" in t.descriptor) ? { ...t, finisher(o) { o.createProperty(t.key, e) } } : { kind: "field", key: Symbol(), placement: "own", descriptor: {}, originalKey: t.key, initializer() { "function" == typeof t.initializer && (this[t.key] = t.initializer.call(this)) }, finisher(o) { o.createProperty(t.key, e) } }, he = (e, t, o) => { t.constructor.createProperty(o, e) }; function ye(e) { return (t, o) => void 0 !== o ? he(e, t, o) : pe(e, t) } function me(e) { return ye({ ...e, state: !0 }) } function fe(e, t) { return (({ finisher: e, descriptor: t }) => (o, i) => { var a; if (void 0 === i) { const i = null !== (a = o.originalKey) && void 0 !== a ? a : o.key, r = null != t ? { kind: "method", placement: "prototype", key: i, descriptor: t(o.key) } : { ...o, key: i }; return null != e && (r.finisher = function (t) { e(t, i) }), r } { const a = o.constructor; void 0 !== t && Object.defineProperty(o, i, t(i)), null == e || e(a, i) } })({ descriptor: o => { const i = { get() { var t, o; return null !== (o = null === (t = this.renderRoot) || void 0 === t ? void 0 : t.querySelector(e)) && void 0 !== o ? o : null }, enumerable: !0, configurable: !0 }; if (t) { const t = "symbol" == typeof o ? Symbol() : "__" + o; i.get = function () { var o, i; return void 0 === this[t] && (this[t] = null !== (i = null === (o = this.renderRoot) || void 0 === o ? void 0 : o.querySelector(e)) && void 0 !== i ? i : null), this[t] } } return i } }) } var ge; null === (ge = window.HTMLSlotElement) || void 0 === ge || ge.prototype.assignedElements; const be = 1; class we { constructor(e) { } get _$AU() { return this._$AM._$AU } _$AT(e, t, o) { this._$Ct = e, this._$AM = t, this._$Ci = o } _$AS(e, t) { return this.update(e, t) } update(e, t) { return this.render(...t) } } const xe = (e => (...t) => ({ _$litDirective$: e, values: t }))(class extends we { constructor(e) { var t; if (super(e), e.type !== be || "class" !== e.name || (null === (t = e.strings) || void 0 === t ? void 0 : t.length) > 2) throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.") } render(e) { return " " + Object.keys(e).filter((t => e[t])).join(" ") + " " } update(e, [t]) { var o, i; if (void 0 === this.it) { this.it = new Set, void 0 !== e.strings && (this.nt = new Set(e.strings.join(" ").split(/\s/).filter((e => "" !== e)))); for (const e in t) t[e] && !(null === (o = this.nt) || void 0 === o ? void 0 : o.has(e)) && this.it.add(e); return this.render(t) } const a = e.element.classList; this.it.forEach((e => { e in t || (a.remove(e), this.it.delete(e)) })); for (const e in t) { const o = !!t[e]; o === this.it.has(e) || (null === (i = this.nt) || void 0 === i ? void 0 : i.has(e)) || (o ? (a.add(e), this.it.add(e)) : (a.remove(e), this.it.delete(e))) } return V } }), ke = (e, t) => Number(`${Math.round(Number(`${e}e${t}`))}e-${t}`); function $e(e) { return !isNaN(parseFloat(e)) && !isNaN(Number(e)) } function ze(e, t = 0) { return $e(e) ? Number(e) : t } var Ee = "0.1.8.1"; console.groupCollapsed(`%c⚡ Power Flow Card Plus v${Ee} is installed`, "color: #488fc2; font-weight: bold"), console.log("Readme:", "https://github.com/flixlix/power-flow-card-plus"), console.groupEnd(); const Se = function (e, t, o) { var i; return void 0 === o && (o = !1), function () { var a = [].slice.call(arguments), r = this, n = o && !i; clearTimeout(i), i = setTimeout((function () { i = null, o || e.apply(r, a) }), t), n && e.apply(r, a) } }((e => { console.log(`%c⚡ Power Flow Card Plus v${Ee} %cError: ${e}`, "color: #488fc2; font-weight: bold", "color: #b33a3a; font-weight: normal") }), 6e4); const Ce = u`:host{--mdc-icon-size:24px;--clickable-cursor:pointer;--individualone-color:#d0cc5b;--individualtwo-color:#964cb5;--non-fossil-color:var(--energy-non-fossil-color, #0f9d58);--icon-non-fossil-color:var(--non-fossil-color, #0f9d58);--icon-solar-color:var(--energy-solar-color, #ff9800);--icon-individualone-color:var(--individualone-color, #d0cc5b);--icon-individualtwo-color:var(--individualtwo-color, #964cb5);--icon-grid-color:var(--energy-grid-consumption-color, #488fc2);--icon-battery-color:var(--energy-battery-in-color, #f06292);--icon-home-color:var(--energy-grid-consumption-color, #488fc2);--text-solar-color:var(--primary-text-color);--text-non-fossil-color:var(--primary-text-color);--text-individualone-color:var(--primary-text-color);--text-individualtwo-color:var(--primary-text-color);--text-home-color:var(--primary-text-color);--secondary-text-individualone-color:var(--primary-text-color);--secondary-text-individualtwo-color:var(--primary-text-color);--text-battery-state-of-charge-color:var(--primary-text-color);--cirlce-grid-color:var(--energy-grid-consumption-color, #488fc2);--circle-battery-color:var(--energy-battery-in-color, #f06292);--battery-grid-line:var(--energy-grid-return-color, #8353d1);--secondary-text-solar-color:var(--primary-text-color);--secondary-text-grid-color:var(--primary-text-color);--secondary-text-home-color:var(--primary-text-color);--secondary-text-non-fossil-color:var(--primary-text-color);--lines-svg-not-flat-line-height:106%;--lines-svg-not-flat-line-top:-3%;--lines-svg-flat-width:calc(100% - 160px);--lines-svg-not-flat-width:calc(103% - 165px);--transparency:var(--transparency-unused-lines);--greyed-out--line-color:#bdbdbd;--text-grid-consumption-color:var(--energy-grid-consumption-color);--text-grid-return-color:var(--energy-grid-return-color);--text-battery-in-color:var(--energy-battery-in-color);--text-battery-out-color:var(--energy-battery-out-color)}ha-card.full-size{height:100%}.card-content.full-size{transform:scale(2) translateY(30%)}.card-content{position:relative;margin:0 auto}.card-content,.row{max-width:470px}.lines{position:absolute;bottom:0;left:0;width:100%;height:146px;display:flex;justify-content:center;padding:0 16px 16px;box-sizing:border-box}.lines.individual1-individual2{bottom:110px}.lines.high{bottom:100px;height:156px}.lines svg{width:var(--lines-svg-flat-width);height:100%;max-width:340px}.lines svg:not(.flat-line){width:var(--lines-svg-not-flat-width);height:var(--lines-svg-not-flat-line-height);top:var(--lines-svg-not-flat-line-top);position:relative}.row{display:flex;justify-content:space-between;max-width:500px;margin:0 auto}.circle-container{display:flex;flex-direction:column;align-items:center;z-index:2}.circle-container.solar{margin:0 4px;height:130px}.circle-container.individual2{margin-left:4px;height:130px}.circle-container.individual1{margin-left:4px;height:130px}.circle-container.individual1.bottom{position:relative;top:-20px;margin-bottom:-20px}.circle-container.battery{height:110px;justify-content:flex-end}.spacer{width:84px}.circle{width:80px;height:80px;border-radius:50%;box-sizing:border-box;border:2px solid;display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;font-size:12px;line-height:12px;position:relative;text-decoration:none;color:var(--primary-text-color)}.circle-container .circle{cursor:var(--clickable-cursor)}#battery-grid{stroke:var(--battery-grid-line)}ha-icon{padding-bottom:2px}ha-icon.small{--mdc-icon-size:12px}.label{color:var(--secondary-text-color);font-size:12px;max-width:80px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;min-height:20px}line,path{stroke:var(--disabled-text-color);stroke-width:1;fill:none}path.transparency{opacity:calc(calc(100 - var(--transparency))/ 100)}path.grey{stroke:var(--greyed-out--line-color)!important}.circle svg{position:absolute;fill:none;stroke-width:4px;width:100%;height:100%;top:0;left:0}span.secondary-info{color:var(--primary-text-color);font-size:12px;max-width:60px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.individual2 circle,.individual2 path{stroke:var(--individualtwo-color)}#individual1-icon{color:var(--icon-individualone-color)}#individual2-icon{color:var(--icon-individualtwo-color)}#solar-icon{color:var(--icon-solar-color)}circle.individual2{stroke-width:4;fill:var(--individualtwo-color)}.individual2 .circle{border-color:var(--individualtwo-color)}.individual1 circle,.individual1 path{stroke:var(--individualone-color)}circle.individual1{stroke-width:4;fill:var(--individualone-color)}.individual1 .circle{border-color:var(--individualone-color)}.circle-container.low-carbon{margin-right:4px;height:130px}.low-carbon path{stroke:var(--non-fossil-color)}.low-carbon .circle{border-color:var(--non-fossil-color)}.low-carbon ha-icon:not(.small){color:var(--icon-non-fossil-color)}circle.low-carbon{stroke-width:4;fill:var(--non-fossil-color);stroke:var(--non-fossil-color)}.solar{color:var(--primary-text-color)}.solar .circle{border-color:var(--energy-solar-color)}.solar ha-icon:not(.small){color:var(--icon-solar-color)}circle.solar,path.solar{stroke:var(--energy-solar-color)}circle.solar{stroke-width:4;fill:var(--energy-solar-color)}.battery .circle{border-color:var(--circle-battery-color)}circle.battery,path.battery{stroke:var(--energy-battery-out-color)}circle.battery-home,path.battery-home{stroke:var(--energy-battery-out-color)}circle.battery-home{stroke-width:4;fill:var(--energy-battery-out-color)}circle.battery-solar,path.battery-solar{stroke:var(--energy-battery-in-color)}circle.battery-solar{stroke-width:4;fill:var(--energy-battery-in-color)}.battery-in{color:var(--energy-battery-in-color)}.battery-out{color:var(--energy-battery-out-color)}span.battery-in{color:var(--text-battery-in-color)}span.battery-out{color:var(--text-battery-out-color)}path.battery-from-grid{stroke:var(--energy-grid-consumption-color)}path.battery-to-grid{stroke:var(--battery-grid-line)}.battery ha-icon:not(.small){color:var(--icon-battery-color)}circle.battery-to-grid,circle.return,path.return{stroke:var(--energy-grid-return-color)}circle.battery-to-grid,circle.return{stroke-width:4;fill:var(--energy-grid-return-color)}.return{color:var(--energy-grid-return-color)}span.return{color:var(--text-grid-return-color)}.grid .circle{border-color:var(--circle-grid-color)}.consumption{color:var(--energy-grid-consumption-color)}span.consumption{color:var(--text-grid-consumption-color)}circle.battery-from-grid,circle.grid,path.grid{stroke:var(--energy-grid-consumption-color)}circle.battery-from-grid,circle.grid{stroke-width:4;fill:var(--energy-grid-consumption-color)}.grid ha-icon:not(.small){color:var(--icon-grid-color)}.home .circle{border-width:0;border-color:var(--primary-color)}.home .circle.border{border-width:2px}.home ha-icon:not(.small){color:var(--icon-home-color)}.circle svg circle{animation:rotate-in .6s ease-in;transition:stroke-dashoffset .4s,stroke-dasharray .4s;fill:none}span.solar{color:var(--text-solar-color)}span.low-carbon{color:var(--text-non-fossil-color)}span.nonFossilFuel.secondary-info{color:var(--secondary-text-non-fossil-color)}#home-circle{color:var(--text-home-color)}.individual1 .circle{color:var(--text-individualone-color)}.individual2 .circle{color:var(--text-individualtwo-color)}.individual1 span.secondary-info{color:var(--secondary-text-individualone-color)}.individual2 span.secondary-info{color:var(--secondary-text-individualtwo-color)}.solar span.secondary-info{color:var(--secondary-text-solar-color)}.grid span.secondary-info{color:var(--secondary-text-grid-color)}.home span.secondary-info{color:var(--secondary-text-home-color)}#battery-state-of-charge-text{color:var(--text-battery-state-of-charge-color)}@keyframes rotate-in{from{stroke-dashoffset:238.76104;stroke-dasharray:238.76104}}.card-actions{display:flex;justify-content:space-between;align-items:center}.card-actions a{text-decoration:none}.home-circle-sections{pointer-events:none}`, Me = { maxFlowRate: 6, minFlowRate: .75, wattDecimals: 0, kilowattDecimals: 1, minExpectedPower: .01, maxExpectedPower: 2e3, wattThreshold: 1e3, transparencyZeroLines: 0, displayZeroLines: { mode: "show", transparency: 50, grey_color: [189, 189, 189] } }; var Ae = { label: { car: "Auto", motorbike: "Motorka" } }, Pe = { entity_generator: "Generátor", combined: "Kombinovaná entita (jedna entita s kladnými a zápornými hodnotami)", separated: "Oddelené subjekty (jeden subjekt pro spotřebu a jeden pro výrobu)", custom_colors: "Vlastní barvy", secondary_info: "Sekundární informace", power_outage: "Výpadek", grid: "Síť", solar: "Solární", battery: "Baterie", fossil_fuel_percentage: "Fosilní palivo", home: "Dům", individual: "Individuální", advanced: "Pokročilá nastavení", decimals: "Desetinná místa", consumption: "Spotřeba", production: "Výroba", color_icon: "Barva ikony", color_circle: "Barva kruhu", color_value: "Barva hodnoty", color_state_of_charge_value: "Barva", display_zero: "Zobrazit nulu", display_zero_tolerance: "Zobrazit nulovou toleranci", display_state: "Zobrazit stav", display_zero_state: "Zobrazení nulového stavu", invert_state: "Invertovat stav", template: "Šablona", unit_of_measurement: "Jednotka", unit_white_space: "Jednotka bílé plochy", label_alert: "Štítek pro upozornění", icon_alert: "Ikona pro upozornění", state_alert: "Stav upozornění", state_of_charge: "Stav nabití", state_of_charge_unit_white_space: "Bílá plocha", state_of_charge_unit: "Jednotky", state_of_charge_decimals: "Desetinná místa", state_of_charge_icon: "Ikona", state_type: "Typ stavu", subtract_individual: "Odečíst individuálně", override_state: "Přepsat stav", calculate_flow_rate: "Počítat průtok", inverted_animation: "Invertovat animaci", show_direction: "Zobrazit směr", color: "Barva", dashboard_link: "Odkaz na informační panel", dashboard_link_label: "Název odkazu na informační panel", w_decimals: "Desetinná místa pro Watty", kw_decimals: "Desetinná místa pro kilowatty", max_flow_rate: "Maximální průtok", min_flow_rate: "Minimální průtok", max_expected_power: "Maximální očekávaný výkon", min_expected_power: "Minimální očekávaný výkon", watt_threshold: "Práh wattů na kilowatty", display_zero_lines: "Zobrazit nulové řádky", clickable_entities: "Entity, na které se dá kliknout", use_new_flow_rate_model: "Nový model průtoku", use_metadata: "Použít Metadata", mode: "Režim", show: "Zobrazit", hide: "Skrýt", custom: "Volitelné", grey_out: "Šedý výstup", transparency: "Průhlednost", grey_color: "Šedá barva" }, De = { card: Ae, editor: Pe }, Te = { label: { car: "Car", motorbike: "Motorbike" } }, Oe = { entity_generator: "Generator", combined: "Combined Entity (One entity with positive and negative values)", separated: "Separated Entities (One entity for consumption and one for production)", custom_colors: "Custom Colors", secondary_info: "Secondary Info", power_outage: "Power Outage", grid: "Grid", solar: "Solar", battery: "Battery", fossil_fuel_percentage: "Fossil Fuel", home: "Home", individual: "Individual", advanced: "Advanced Options", decimals: "Decimals", consumption: "Consumption", production: "Production", color_icon: "Color of Icon", color_circle: "Color of Circle", color_value: "Color of Value", color_state_of_charge_value: "Color", display_zero: "Display Zero", display_zero_tolerance: "Display Zero Tolerance", display_state: "Display State", display_zero_state: "Display Zero State", invert_state: "Invert State", template: "Template", unit_of_measurement: "Unit", unit_white_space: "Unit White Space", label_alert: "Label for Alert", icon_alert: "Icon for Alert", state_alert: "State of Alert", state_of_charge: "State of Charge", state_of_charge_unit_white_space: "White Space", state_of_charge_unit: "Unit", state_of_charge_decimals: "Decimals", state_of_charge_icon: "Icon", state_type: "Type of State", subtract_individual: "Subtract Individual", override_state: "Override State", calculate_flow_rate: "Calculate Flow Rate", inverted_animation: "Invert Animation", show_direction: "Show Direction", color: "Color", dashboard_link: "Dashboard Link", dashboard_link_label: "Dashboard Link Name", w_decimals: "Watt Decimals", kw_decimals: "Kilowatt Decimals", max_flow_rate: "Max Flow Rate", min_flow_rate: "Min Flow Rate", max_expected_power: "Max Expected Power", min_expected_power: "Min Expected Power", watt_threshold: "Watt to Kilowatt Threshold", display_zero_lines: "Display Zero Lines", clickable_entities: "Clickable Entities", use_new_flow_rate_model: "New Flow Rate Model", use_metadata: "Use Metadata", mode: "Mode", show: "Show", hide: "Hide", custom: "Custom", grey_out: "Grey Out", transparency: "Transparency", grey_color: "Grey Color" }, je = { card: Te, editor: Oe }, Ne = { label: { car: "Auto", motorbike: "Motorrad" } }, Ge = { entity_generator: "Generator", combined: "Kombinierte Entität (Eine Entität mit positiven und negativen Werten)", separated: "Getrennte Entitäten (Eine Entität für den Verbrauch und eine für die Produktion)", custom_colors: "Benutzerdefinierte Farben", secondary_info: "Sekundäre Information", power_outage: "Stromausfall", grid: "Netz", solar: "Solar", battery: "Batterie", fossil_fuel_percentage: "Fossile Brennstoffe", home: "Zuhause", individual: "Individuell", advanced: "Erweiterte Optionen", decimals: "Dezimalstellen", consumption: "Verbrauch", production: "Produktion", color_icon: "Farbe des Symbols", color_circle: "Farbe des Kreises", color_value: "Farbe des Wertes", color_state_of_charge_value: "Farbe", display_zero: "Null anzeigen", display_zero_tolerance: "Nulltoleranz", display_state: "Zustand anzeigen", display_zero_state: "Nullzustand anzeigen", invert_state: "Zustand umkehren", template: "Vorlage", unit_of_measurement: "Einheit", unit_white_space: "Weißraum für Einheit", label_alert: "Beschriftung für Alarm", icon_alert: "Symbol für Alarm", state_alert: "Alarmzustand", state_of_charge: "Ladezustand", state_of_charge_unit_white_space: "Leerzeichen", state_of_charge_unit: "Einheit", state_of_charge_decimals: "Dezimalstellen", state_of_charge_icon: "Symbol", state_type: "Typ des Zustands", subtract_individual: "Individuell abziehen", override_state: "Zustand überschreiben", calculate_flow_rate: "Flussrate berechnen", inverted_animation: "Animation umkehren", show_direction: "Richtung anzeigen", color: "Farbe", dashboard_link: "Dashboard-Link", dashboard_link_label: "Name des Dashboard-Links", w_decimals: "Watt-Dezimalstellen", kw_decimals: "Kilowatt-Dezimalstellen", max_flow_rate: "Maximale Flussrate", min_flow_rate: "Minimale Flussrate", max_expected_power: "Maximale erwartete Leistung", min_expected_power: "Minimale erwartete Leistung", watt_threshold: "Watt-zu-Kilowatt-Schwelle", display_zero_lines: "Nulllinien anzeigen", clickable_entities: "Klickbare Entitäten", use_new_flow_rate_model: "Neues Fluss-Modell verwenden", use_metadata: "Metadaten verwenden", mode: "Modus", show: "Anzeigen", hide: "Verstecken", custom: "Benutzerdefiniert", grey_out: "Ausgrauen", transparency: "Transparenz", grey_color: "Graue Farbe" }, Be = { card: Ne, editor: Ge }, Fe = { label: { car: "Bil", motorbike: "Motorcykel" } }, Ie = { entity_generator: "Generator", combined: "Kombineret enhed (Én enhed med positive og negative værdier)", separated: "Adskilte enheder (én enhed til forbrug og én til produktion)", custom_colors: "Brugerdefinerede farver", secondary_info: "Sekundær info", power_outage: "Strømafbrydelse", grid: "El-Net", solar: "Solar", battery: "Batteri", fossil_fuel_percentage: "Fossilt Brændstof", home: "Hjem", individual: "Individuel", advanced: "Avancerede indstillinger", decimals: "Decimaler", consumption: "Forbrug", production: "Produktion", color_icon: "Farve af Icon", color_circle: "Farve af Cirkel", color_value: "Farve af værdi", color_state_of_charge_value: "Farve", display_zero: "Vis Nul", display_zero_tolerance: "Vis ingen tolerance", display_state: "Vis Tilstand", display_zero_state: "Vis Nultilstand", invert_state: "Omvendt tilstand", template: "Skabelon", unit_of_measurement: "Enhed", unit_white_space: "Enhed tomt mellemrum", label_alert: "Etiket til Alarm", icon_alert: "Ikon for alarm", state_alert: "Alarmtilstand", state_of_charge: "Ladningstilstand", state_of_charge_unit_white_space: "Tomt mellemrum", state_of_charge_unit: "Enhed", state_of_charge_decimals: "Decimal", state_of_charge_icon: "Ikon", state_type: "Tilstande", subtract_individual: "Subtract Individual", override_state: "Overskriv Tilstand", calculate_flow_rate: "Beregn Hastighed", inverted_animation: "Omvendt Animation", show_direction: "Vis Retning", color: "Farve", dashboard_link: "Dashboard Link", dashboard_link_label: "Dashboard Link Navn", w_decimals: "Watt Decimal", kw_decimals: "Kilowatt Decimal", max_flow_rate: "Max Flow Rate", min_flow_rate: "Min Flow Rate", max_expected_power: "Max Forventede Strøm", min_expected_power: "Min Forventede Power", watt_threshold: "Watt til Kilowatt Grænse", display_zero_lines: "Vis Nul Linjer", clickable_entities: "Klikbar enheder", use_new_flow_rate_model: "Ny flowhastighedsmodel", use_metadata: "Brug Metadata", mode: "Tilstand", show: "Vis", hide: "Skjul", custom: "Brugerdefinerede", grey_out: "Grået ud", transparency: "Transparens", grey_color: "Grå Farve" }, Re = { card: Fe, editor: Ie }, He = { label: { car: "Carro", motorbike: "Mota" } }, Le = { entity_generator: "Gerador", combined: "Entidade combinada (uma entidade com valores positivos e negativos)", separated: "Entidades Separadas (Uma entidade para consumo e outra para produção)", custom_colors: "Cores personalizadas", secondary_info: "Informação Secundária", power_outage: "Falta de energia", grid: "Rede", solar: "Solar", battery: "Bateria", fossil_fuel_percentage: "Combustíveis Fósseis", home: "Casa", individual: "Individual", advanced: "Opções Avançadas", decimals: "Casas Decimais", consumption: "Consumo", production: "Produção", color_icon: "Cor do Ícone", color_circle: "Cor do Círculo", color_value: "Cor do Valor", color_state_of_charge_value: "Cor", display_zero: "Mostrar Zero", display_zero_tolerance: "Tolerância do Zero", display_state: "Mostrar Estado", display_zero_state: "Mostrar Estado Zero", invert_state: "Inverter Estado", template: "Modelo", unit_of_measurement: "Unidade", unit_white_space: "Espaçamento da Unidade", label_alert: "Nome para Alerta", icon_alert: "Ícone para Alerta", state_alert: "Estado do Alerta", state_of_charge: "Estado de Carga", state_of_charge_unit_white_space: "Espaçamento", state_of_charge_unit: "Unidade", state_of_charge_decimals: "Casas Decimais", state_of_charge_icon: "Ícone", state_type: "Tipo de Estado", subtract_individual: "Subtrair Individualmente", override_state: "Substituir Estado", calculate_flow_rate: "Calcular Taxa de Fluxo", inverted_animation: "Animação Invertida", show_direction: "Mostrar Direção", color: "Cor", dashboard_link: "Link do Painel de Controlo", dashboard_link_label: "Nome do Link do Painel de Controlo", w_decimals: "Casas Decimais de Watt", kw_decimals: "Casas Decimais de Quilowatt", max_flow_rate: "Taxa de Fluxo Máxima", min_flow_rate: "Taxa de Fluxo Mínima", max_expected_power: "Potência Máxima Esperada", min_expected_power: "Potência Mínima Esperada", watt_threshold: "Limiar de Watt para Quilowatt", display_zero_lines: "Mostrar Linhas Zero", clickable_entities: "Entidades Clicáveis", use_new_flow_rate_model: "Utilizar Novo Modelo de Velocidade", use_metadata: "Utilizar Metadados", mode: "Modo", show: "Mostrar", hide: "Esconder", custom: "Personalizado", grey_out: "Cinzento", transparency: "Transparência", grey_color: "Cor Cinzenta" }, Ue = { card: He, editor: Le }, We = { label: { car: "Carro", motorbike: "Mota" } }, Ve = { entity_generator: "Gerador", combined: "Entidade combinada (uma entidade com valores positivos e negativos)", separated: "Entidades Separadas (Uma entidade para consumo e outra para produção)", custom_colors: "Cores personalizadas", secondary_info: "Informação Secundária", power_outage: "Falta de energia", grid: "Rede", solar: "Solar", battery: "Bateria", fossil_fuel_percentage: "Combustíveis Fósseis", home: "Casa", individual: "Individual", advanced: "Opções Avançadas", decimals: "Casas Decimais", consumption: "Consumo", production: "Produção", color_icon: "Cor do Ícone", color_circle: "Cor do Círculo", color_value: "Cor do Valor", color_state_of_charge_value: "Cor", display_zero: "Exibir Zero", display_zero_tolerance: "Tolerância de Zero", display_state: "Exibir Estado", display_zero_state: "Exibir Estado Zero", invert_state: "Inverter Estado", template: "Modelo", unit_of_measurement: "Unidade", unit_white_space: "Espaçamento da Unidade", label_alert: "Rótulo para Alerta", icon_alert: "Ícone para Alerta", state_alert: "Estado do Alerta", state_of_charge: "Estado de Carga", state_of_charge_unit_white_space: "Espaçamento", state_of_charge_unit: "Unidade", state_of_charge_decimals: "Casas Decimais", state_of_charge_icon: "Ícone", state_type: "Tipo de Estado", subtract_individual: "Subtrair Individualmente", override_state: "Substituir Estado", calculate_flow_rate: "Calcular Taxa de Fluxo", inverted_animation: "Animação Invertida", show_direction: "Mostrar Direção", color: "Cor", dashboard_link: "Link do Painel", dashboard_link_label: "Nome do Link do Painel", w_decimals: "Casas Decimais de Watts", kw_decimals: "Casas Decimais de Quilowatts", max_flow_rate: "Taxa de Fluxo Máxima", min_flow_rate: "Taxa de Fluxo Mínima", max_expected_power: "Potência Máxima Esperada", min_expected_power: "Potência Mínima Esperada", watt_threshold: "Limiar de Watts para Quilowatts", display_zero_lines: "Exibir Linhas Zero", clickable_entities: "Entidades Clicáveis", use_new_flow_rate_model: "Utilizar Novo Modelo de Velocidade", use_metadata: "Utilizar Metadados", mode: "Modo", show: "Mostrar", hide: "Esconder", custom: "Personalizado", grey_out: "Cinza", transparency: "Transparência", grey_color: "Cor do Cinza" }, Ze = { card: We, editor: Ve }, Ke = { label: { car: "Coche", motorbike: "Motocicleta" } }, Ye = { entity_generator: "Generador", combined: "Entidad combinada (una entidad con valores positivos y negativos)", separated: "Entidades separadas (una entidad de consumo y otra de producción)", custom_colors: "Colores personalizados", secondary_info: "Información secundaria", power_outage: "Corte de energía", grid: "Red eléctrica", solar: "Solar", battery: "Batería", fossil_fuel_percentage: "Combustible Fósil", home: "Inicio", individual: "Individual", advanced: "Opciones Avanzadas", decimals: "Decimales", consumption: "Consumo", production: "Producción", color_icon: "Color del Icono", color_circle: "Color del Círculo", color_value: "Color del Valor", color_state_of_charge_value: "Color", display_zero: "Mostrar Cero", display_zero_tolerance: "Tolerancia de Cero", display_state: "Mostrar Estado", display_zero_state: "Mostrar Estado Cero", invert_state: "Invertir Estado", template: "Plantilla", unit_of_measurement: "Unidad", unit_white_space: "Espacio en Blanco de la Unidad", label_alert: "Etiqueta para Alerta", icon_alert: "Ícono para Alerta", state_alert: "Estado de Alerta", state_of_charge: "Estado de Carga", state_of_charge_unit_white_space: "Espacio en Blanco", state_of_charge_unit: "Unidad", state_of_charge_decimals: "Decimales", state_of_charge_icon: "Ícono", state_type: "Tipo de Estado", subtract_individual: "Restar Individualmente", override_state: "Sobrescribir Estado", calculate_flow_rate: "Calcular Tasa de Flujo", inverted_animation: "Animación Invertida", show_direction: "Mostrar Dirección", color: "Color", dashboard_link: "Enlace del Tablero", dashboard_link_label: "Nombre del Enlace del Tablero", w_decimals: "Decimales de Vatio", kw_decimals: "Decimales de Kilovatio", max_flow_rate: "Tasa de Flujo Máxima", min_flow_rate: "Tasa de Flujo Mínima", max_expected_power: "Potencia Máxima Esperada", min_expected_power: "Potencia Mínima Esperada", watt_threshold: "Umbral de Vatio a Kilovatio", display_zero_lines: "Mostrar Líneas de Cero", clickable_entities: "Entidades Clicables", use_new_flow_rate_model: "Utilizar Nuevo Modelo de Tasa de Flujo", use_metadata: "Utilizar Metadatos", mode: "Modo", show: "Mostrar", hide: "Ocultar", custom: "Personalizado", grey_out: "Gris", transparency: "Transparencia", grey_color: "Color Gris" }, Je = { card: Ke, editor: Ye }, qe = { label: { car: "Auto", motorbike: "Motorfiets" } }, Qe = { entity_generator: "Generator", combined: "Gecombineerde entiteit (één entiteit met positieve en negatieve waarden)", separated: "Gescheiden entiteiten (één entiteit voor consumptie en één voor productie)", custom_colors: "Aangepaste kleuren", secondary_info: "Secundaire informatie", power_outage: "Stroomuitval", grid: "Elektriciteitsnet", solar: "Zonne-energie", battery: "Batterij", fossil_fuel_percentage: "Fossiele Brandstof", home: "Thuis", individual: "Individueel", advanced: "Geavanceerde Opties", decimals: "Decimalen", consumption: "Verbruik", production: "Productie", color_icon: "Kleur van Pictogram", color_circle: "Kleur van Cirkel", color_value: "Kleur van Waarde", color_state_of_charge_value: "Kleur", display_zero: "Nul Weergeven", display_zero_tolerance: "Nultolerantie Weergeven", display_state: "Toestand Weergeven", display_zero_state: "Nul Toestand Weergeven", invert_state: "Toestand Omkeren", template: "Sjabloon", unit_of_measurement: "Eenheid", unit_white_space: "Eenheid Spaties", label_alert: "Label voor Alarm", icon_alert: "Pictogram voor Alarm", state_alert: "Toestand van Alarm", state_of_charge: "Laadstatus", state_of_charge_unit_white_space: "Spaties", state_of_charge_unit: "Eenheid", state_of_charge_decimals: "Decimalen", state_of_charge_icon: "Pictogram", state_type: "Type Toestand", subtract_individual: "Individueel Aftrekken", override_state: "Toestand Overschrijven", calculate_flow_rate: "Stroomsnelheid Berekenen", inverted_animation: "Animatie Omkeren", show_direction: "Richting Weergeven", color: "Kleur", dashboard_link: "Dashboard Link", dashboard_link_label: "Naam van Dashboard Link", w_decimals: "Watt Decimalen", kw_decimals: "Kilowatt Decimalen", max_flow_rate: "Maximale Stroomsnelheid", min_flow_rate: "Minimale Stroomsnelheid", max_expected_power: "Maximaal Verwacht Vermogen", min_expected_power: "Minimaal Verwacht Vermogen", watt_threshold: "Watt naar Kilowatt Drempelwaarde", display_zero_lines: "Nullijnen Weergeven", clickable_entities: "Klikbare Entiteiten", use_new_flow_rate_model: "Nieuw Stroomsnelheid Model Gebruiken", use_metadata: "Metadata Gebruiken", mode: "Modus", show: "Weergeven", hide: "Verbergen", custom: "Aangepast", grey_out: "Grijstint", transparency: "Transparantie", grey_color: "Grijstint" }, Xe = { card: qe, editor: Qe }, et = { label: { car: "Auto", motorbike: "Motocicletta" } }, tt = { entity_generator: "Generatore", combined: "Entità combinata (un'entità con valori positivi e negativi)", separated: "Entità separate (Un'entità per il consumo e una per la produzione)", custom_colors: "Colori personalizzati", secondary_info: "Informazioni secondarie", power_outage: "Interruzione di corrente", grid: "Rete Elettrica", solar: "Solare", battery: "Batteria", fossil_fuel_percentage: "Carburante Fossile", home: "Casa", individual: "Individuale", advanced: "Opzioni Avanzate", decimals: "Decimali", consumption: "Consumo", production: "Produzione", color_icon: "Colore dell'Icona", color_circle: "Colore del Cerchio", color_value: "Colore del Valore", color_state_of_charge_value: "Colore", display_zero: "Mostra Zero", display_zero_tolerance: "Tolleranza dello Zero", display_state: "Mostra Stato", display_zero_state: "Mostra Stato Zero", invert_state: "Inverti Stato", template: "Modello", unit_of_measurement: "Unità", unit_white_space: "Spazio Bianco Unità", label_alert: "Etichetta per l'Allarme", icon_alert: "Icona per l'Allarme", state_alert: "Stato dell'Allarme", state_of_charge: "Stato di Carica", state_of_charge_unit_white_space: "Spazio Bianco", state_of_charge_unit: "Unità", state_of_charge_decimals: "Decimali", state_of_charge_icon: "Icona", state_type: "Tipo di Stato", subtract_individual: "Sottrai Individualmente", override_state: "Sovrascrivi Stato", calculate_flow_rate: "Calcola Tasso di Flusso", inverted_animation: "Animazione Invertita", show_direction: "Mostra Direzione", color: "Colore", dashboard_link: "Collegamento Dashboard", dashboard_link_label: "Nome Collegamento Dashboard", w_decimals: "Decimali Watt", kw_decimals: "Decimali Kilowatt", max_flow_rate: "Tasso di Flusso Massimo", min_flow_rate: "Tasso di Flusso Minimo", max_expected_power: "Potenza Massima Prevista", min_expected_power: "Potenza Minima Prevista", watt_threshold: "Soglia Watt per Kilowatt", display_zero_lines: "Mostra Linee Zero", clickable_entities: "Entità Cliccabili", use_new_flow_rate_model: "Utilizza Nuovo Modello di Tasso di Flusso", use_metadata: "Utilizza Metadati", mode: "Modalità", show: "Mostra", hide: "Nascondi", custom: "Personalizzato", grey_out: "Sfuma", transparency: "Trasparenza", grey_color: "Colore Sfumato" }, ot = { card: et, editor: tt }, it = { label: { car: "Voiture", motorbike: "Moto" } }, at = { entity_generator: "Générateur", combined: "Entité combinée (une entité avec des valeurs positives et négatives)", separated: "Entités séparées (une entité pour la consommation et une pour la production)", custom_colors: "Couleurs personnalisées", secondary_info: "Informations secondaires", power_outage: "Panne de courant", grid: "Réseau Électrique", solar: "Solaire", battery: "Batterie", fossil_fuel_percentage: "Carburant fossile", home: "Domicile", individual: "Individuel", advanced: "Options avancées", decimals: "Décimales", consumption: "Consommation", production: "Production", color_icon: "Couleur de l'icône", color_circle: "Couleur du cercle", color_value: "Couleur de la valeur", color_state_of_charge_value: "Couleur", display_zero: "Afficher zéro", display_zero_tolerance: "Tolérance de l'affichage zéro", display_state: "Afficher l'état", display_zero_state: "Afficher l'état zéro", invert_state: "Inverser l'état", template: "Modèle", unit_of_measurement: "Unité", unit_white_space: "Espace blanc de l'unité", label_alert: "Libellé de l'alerte", icon_alert: "Icône de l'alerte", state_alert: "État de l'alerte", state_of_charge: "État de charge", state_of_charge_unit_white_space: "Espace blanc de l'unité", state_of_charge_unit: "Unité", state_of_charge_decimals: "Décimales", state_of_charge_icon: "Icône", state_type: "Type d'état", subtract_individual: "Soustraire l'individuel", override_state: "Remplacer l'état", calculate_flow_rate: "Calculer le débit", inverted_animation: "Animation inversée", show_direction: "Afficher la direction", color: "Couleur", dashboard_link: "Lien du tableau de bord", dashboard_link_label: "Nom du lien du tableau de bord", w_decimals: "Décimales de watt", kw_decimals: "Décimales de kilowatt", max_flow_rate: "Débit maximal", min_flow_rate: "Débit minimal", max_expected_power: "Puissance maximale attendue", min_expected_power: "Puissance minimale attendue", watt_threshold: "Seuil de watt vers kilowatt", display_zero_lines: "Afficher les lignes zéro", clickable_entities: "Entités cliquables", use_new_flow_rate_model: "Nouveau modèle de débit", use_metadata: "Utiliser les métadonnées", mode: "Mode", show: "Afficher", hide: "Masquer", custom: "Personnalisé", grey_out: "Griser", transparency: "Transparence", grey_color: "Couleur grise" }, rt = { card: it, editor: at }, nt = { label: { car: "Автомобиль", motorbike: "Мотоцикл" } }, lt = { entity_generator: "Генератор", combined: "Комбинированный объект (один объект с положительными и отрицательными значениями)", separated: "Отдельные объекты (один объект для потребления и один для производства)", custom_colors: "Пользовательские цвета", secondary_info: "Вторичная информация", power_outage: "Отключение электричества", grid: "Электрическая сеть", solar: "Солнечная", battery: "Батарея", fossil_fuel_percentage: "Полный объем ископаемого топлива", home: "Домашняя", individual: "Индивидуальная", advanced: "Расширенные настройки", decimals: "Десятичные", consumption: "Потребление", production: "Производство", color_icon: "Цвет иконки", color_circle: "Цвет круга", color_value: "Цвет значения", color_state_of_charge_value: "Цвет", display_zero: "Отображать ноль", display_zero_tolerance: "Допустимая погрешность нуля", display_state: "Отображать состояние", display_zero_state: "Отображать состояние нуля", invert_state: "Инвертировать состояние", template: "Шаблон", unit_of_measurement: "Единица измерения", unit_white_space: "Пробел единицы измерения", label_alert: "Метка для предупреждения", icon_alert: "Иконка для предупреждения", state_alert: "Состояние предупреждения", state_of_charge: "Уровень заряда", state_of_charge_unit_white_space: "Пробел", state_of_charge_unit: "Единица измерения", state_of_charge_decimals: "Десятичные", state_of_charge_icon: "Иконка", state_type: "Тип состояния", subtract_individual: "Вычесть индивидуально", override_state: "Переопределить состояние", calculate_flow_rate: "Рассчитать скорость потока", inverted_animation: "Инвертированная анимация", show_direction: "Показать направление", color: "Цвет", dashboard_link: "Ссылка на панель управления", dashboard_link_label: "Название ссылки на панель управления", w_decimals: "Десятичные ватт", kw_decimals: "Десятичные киловатт", max_flow_rate: "Максимальная скорость потока", min_flow_rate: "Минимальная скорость потока", max_expected_power: "Максимальная ожидаемая мощность", min_expected_power: "Минимальная ожидаемая мощность", watt_threshold: "Пороговое значение ватт в киловатты", display_zero_lines: "Отображать нулевые линии", clickable_entities: "Кликабельные сущности", use_new_flow_rate_model: "Использовать новую модель скорости потока", use_metadata: "Использовать метаданные", mode: "Режим", show: "Показать", hide: "Скрыть", custom: "Пользовательский", grey_out: "Серый", transparency: "Прозрачность", grey_color: "Серый цвет" }, st = { card: nt, editor: lt }, dt = { label: { car: "Auto", motorbike: "Moottoripyörä" } }, ct = { entity_generator: "Generaattori", combined: "Yhdistetty kokonaisuus (yksi kokonaisuus positiivisilla ja negatiivisilla arvoilla)", separated: "Erotetut kokonaisuudet (yksi kulutukseen ja yksi tuotantoon)", custom_colors: "Mukautetut värit", secondary_info: "Toissijaiset tiedot", power_outage: "Sähkökatkos", grid: "Sähköverkko", solar: "Aurinko", battery: "Akku", fossil_fuel_percentage: "Fossiilinen polttoaine", home: "Koti", individual: "Yksittäinen", advanced: "Lisäasetukset", decimals: "Desimaalit", consumption: "Kulutus", production: "Tuotanto", color_icon: "Ikonin väri", color_circle: "Ympyrän väri", color_value: "Arvon väri", color_state_of_charge_value: "Väri", display_zero: "Näytä nolla", display_zero_tolerance: "Näytä nolla-toleranssi", display_state: "Näytä tila", display_zero_state: "Näytä nolla-tila", invert_state: "Käänteinen tila", template: "Malli", unit_of_measurement: "Yksikkö", unit_white_space: "Yksikön välilyönti", label_alert: "Hälytyksen teksti", icon_alert: "Hälytyksen kuvake", state_alert: "Hälytyksen tila", state_of_charge: "Varauksen tila", state_of_charge_unit_white_space: "Välilyönti", state_of_charge_unit: "Yksikkö", state_of_charge_decimals: "Desimaalit", state_of_charge_icon: "Kuvake", state_type: "Tilan tyyppi", subtract_individual: "Vähennä yksittäinen", override_state: "Korvaa tila", calculate_flow_rate: "Laske virtausnopeus", inverted_animation: "Käänteinen animaatio", show_direction: "Näytä suunta", color: "Väri", dashboard_link: "Ohjauspaneelin linkki", dashboard_link_label: "Ohjauspaneelin linkin nimi", w_decimals: "Wattien desimaalit", kw_decimals: "Kilowattien desimaalit", max_flow_rate: "Maksimivirtausnopeus", min_flow_rate: "Minimivirtausnopeus", max_expected_power: "Ennustettu maksimiteho", min_expected_power: "Ennustettu minimiteho", watt_threshold: "Wattin ja kilowatin kynnysarvo", display_zero_lines: "Näytä nolla-viivat", clickable_entities: "Napautettavat kohteet", use_new_flow_rate_model: "Uusi virtausnopeusmalli", use_metadata: "Käytä metatietoja", mode: "Tila", show: "Näytä", hide: "Piilota", custom: "Mukautettu", grey_out: "Harmaa", transparency: "Läpinäkyvyys", grey_color: "Harmaa väri" }, ut = { card: dt, editor: ct }, _t = { label: { car: "Samochód", motorbike: "Motocykl" } }, vt = { entity_generator: "Generator", combined: "Jednostka połączona (jedna jednostka z wartościami dodatnimi i ujemnymi)", separated: "Oddzielne podmioty (jeden podmiot do konsumpcji i jeden do produkcji)", custom_colors: "Kolory niestandardowe", secondary_info: "Informacje dodatkowe", power_outage: "Brak prądu", grid: "Sieć elektryczna", solar: "Energia słoneczna", battery: "Bateria", fossil_fuel_percentage: "Paliwo kopalne", home: "Dom", individual: "Indywidualne", advanced: "Zaawansowane opcje", decimals: "Miejsca po przecinku", consumption: "Zużycie", production: "Produkcja", color_icon: "Kolor ikony", color_circle: "Kolor okręgu", color_value: "Kolor wartości", color_state_of_charge_value: "Kolor", display_zero: "Wyświetl zero", display_zero_tolerance: "Wyświetl tolerancję zera", display_state: "Wyświetl stan", display_zero_state: "Wyświetl stan zera", invert_state: "Odwróć stan", template: "Szablon", unit_of_measurement: "Jednostka", unit_white_space: "Spacja jednostki", label_alert: "Etykieta alertu", icon_alert: "Ikona alertu", state_alert: "Stan alertu", state_of_charge: "Stan naładowania", state_of_charge_unit_white_space: "Spacja jednostki", state_of_charge_unit: "Jednostka", state_of_charge_decimals: "Miejsca po przecinku", state_of_charge_icon: "Ikona", state_type: "Typ stanu", subtract_individual: "Odjęcie indywidualne", override_state: "Nadpisanie stanu", calculate_flow_rate: "Oblicz wskaźnik przepływu", inverted_animation: "Odwróć animację", show_direction: "Pokaż kierunek", color: "Kolor", dashboard_link: "Link do panelu", dashboard_link_label: "Nazwa linku do panelu", w_decimals: "Miejsca po przecinku dla watów", kw_decimals: "Miejsca po przecinku dla kilowatów", max_flow_rate: "Maksymalna szybkość przepływu", min_flow_rate: "Minimalna szybkość przepływu", max_expected_power: "Maksymalna oczekiwana moc", min_expected_power: "Minimalna oczekiwana moc", watt_threshold: "Próg watów na kilowaty", display_zero_lines: "Wyświetl linie zera", clickable_entities: "Klikalne jednostki", use_new_flow_rate_model: "Nowy model wskaźnika przepływu", use_metadata: "Użyj metadanych", mode: "Tryb", show: "Pokaż", hide: "Ukryj", custom: "Niestandardowy", grey_out: "Szary", transparency: "Przezroczystość", grey_color: "Kolor szary" }, pt = { card: _t, editor: vt }, ht = { label: { car: "Auto", motorbike: "Motorka" } }, yt = { entity_generator: "Generátor", combined: "Kombinovaná entita (jedna entita s kladnými a zápornými hodnotami)", separated: "Oddelené subjekty (jeden subjekt pre spotrebu a jeden pre výrobu)", custom_colors: "Vlastné farby", secondary_info: "Sekundárne informácie", power_outage: "Výpadok", grid: "Sieť", solar: "Solárne", battery: "Batéria", fossil_fuel_percentage: "Fosílne palivo", home: "Doma", individual: "Individuálne", advanced: "Pokročilé nastavenia", decimals: "Desatinné", consumption: "Spotreba", production: "Výroba", color_icon: "Farba ikony", color_circle: "Farba kruhu", color_value: "Farba hodnoty", color_state_of_charge_value: "Farba", display_zero: "Zobraziť nulu", display_zero_tolerance: "Zobraziť nulovú toleranciu", display_state: "Zobraziť stav", display_zero_state: "Zobrazenie nulového stavu", invert_state: "Invertovať stav", template: "Šablóna", unit_of_measurement: "Jednotka", unit_white_space: "Jednotka bielej plochy", label_alert: "Štítok pre upozornenie", icon_alert: "Ikona pre upozornenie", state_alert: "Stav upozornenia", state_of_charge: "Stav nabitia", state_of_charge_unit_white_space: "Biela plocha", state_of_charge_unit: "Jednotky", state_of_charge_decimals: "Desatinné", state_of_charge_icon: "Ikona", state_type: "Typ stavu", subtract_individual: "Odčítať individuálne", override_state: "Prepísať stav", calculate_flow_rate: "Počítať prietok", inverted_animation: "Invertovať animáciu", show_direction: "Zobraziť smer", color: "Farba", dashboard_link: "Odkaz na informačný panel", dashboard_link_label: "Názov odkazu na informačný panel", w_decimals: "Wattové desatinné miesta", kw_decimals: "Kilowattové desatinné miesta", max_flow_rate: "Max prietok", min_flow_rate: "Min prietok", max_expected_power: "Max očakávaný výkon", min_expected_power: "Min očakávaný výkon", watt_threshold: "Prah wattov na kilowatty", display_zero_lines: "Zobraziť nulové riadky", clickable_entities: "Entity, na ktoré sa dá kliknúť", use_new_flow_rate_model: "Nový model prietoku", use_metadata: "Použiť Metadata", mode: "Mód", show: "Zobraziť", hide: "Skryť", custom: "Voliteľné", grey_out: "Grey Out", transparency: "Transparentnosť", grey_color: "Šedá farba" }, mt = { card: ht, editor: yt }; const ft = { cs: Object.freeze({ __proto__: null, card: Ae, editor: Pe, default: De }), en: Object.freeze({ __proto__: null, card: Te, editor: Oe, default: je }), de: Object.freeze({ __proto__: null, card: Ne, editor: Ge, default: Be }), dk: Object.freeze({ __proto__: null, card: Fe, editor: Ie, default: Re }), pt: Object.freeze({ __proto__: null, card: He, editor: Le, default: Ue }), pt_BR: Object.freeze({ __proto__: null, card: We, editor: Ve, default: Ze }), es: Object.freeze({ __proto__: null, card: Ke, editor: Ye, default: Je }), nl: Object.freeze({ __proto__: null, card: qe, editor: Qe, default: Xe }), it: Object.freeze({ __proto__: null, card: et, editor: tt, default: ot }), fr: Object.freeze({ __proto__: null, card: it, editor: at, default: rt }), ru: Object.freeze({ __proto__: null, card: nt, editor: lt, default: st }), fi: Object.freeze({ __proto__: null, card: dt, editor: ct, default: ut }), pl: Object.freeze({ __proto__: null, card: _t, editor: vt, default: pt }), sk: Object.freeze({ __proto__: null, card: ht, editor: yt, default: mt }) }, gt = "en"; function bt(e, t) { try { return e.split(".").reduce(((e, t) => e[t]), ft[t]) } catch (e) { return } } function wt(e) { let t = bt(e, (localStorage.getItem("selectedLanguage") || "en").replace(/['"]+/g, "").replace("-", "_")); return t || (t = bt(e, gt)), null != t ? t : e } const xt = 238.76104; !function (e) { const t = window; t.customCards = t.customCards || [], t.customCards.push(Object.assign(Object.assign({}, e), { preview: !0, documentationURL: "https://github.com/flixlix/power-flow-card-plus" })) }({ type: "power-flow-card-plus", name: "Power Flow Card Plus", description: "An extended version of the power flow card with richer options, advanced features and a few small UI enhancements. Inspired by the Energy Dashboard." }); let kt = class extends ue { constructor() { super(...arguments), this._config = {}, this._templateResults = {}, this._unsubRenderTemplates = new Map, this._width = 0, this.unavailableOrMisconfiguredError = e => Se(`Entity "${null != e ? e : "Unknown"}" is not available or misconfigured`), this.entityExists = e => e in this.hass.states, this.entityAvailable = e => { var t; return $e(null === (t = this.hass.states[e]) || void 0 === t ? void 0 : t.state) }, this.entityInverted = e => { var t; return !!(null === (t = this._config.entities[e]) || void 0 === t ? void 0 : t.invert_state) }, this.previousDur = {}, this.circleRate = (e, t) => { var o, i; if (this._config.use_new_flow_rate_model) { const t = this._config.max_expected_power, o = this._config.min_expected_power, i = this._config.max_flow_rate, a = this._config.min_flow_rate; return this.mapRange(e, i, a, o, t) } const a = null === (o = this._config) || void 0 === o ? void 0 : o.min_flow_rate, r = null === (i = this._config) || void 0 === i ? void 0 : i.max_flow_rate; return r - e / (t > 0 ? t : e) * (r - a) }, this.getEntityStateObj = e => { if (e && this.entityAvailable(e)) return this.hass.states[e]; this.unavailableOrMisconfiguredError(e) }, this.additionalCircleRate = (e, t) => !0 === e && t ? t : $e(e) ? e : 1.66, this.getEntityState = e => e && this.entityAvailable(e) ? ze(this.hass.states[e].state) : (this.unavailableOrMisconfiguredError(e), 0), this.getEntityStateWatts = e => { var t; if (!e || !this.entityAvailable(e)) return this.unavailableOrMisconfiguredError(e), 0; const o = this.hass.states[e], i = ze(o.state); return (null === (t = o.attributes.unit_of_measurement) || void 0 === t ? void 0 : t.toUpperCase().startsWith("KW")) ? 1e3 * i : i }, this.displayNonFossilState = (e, t) => { var o, i, a, r, n, l, s; if (!e || !this.entityAvailable(e)) return this.unavailableOrMisconfiguredError(e), "NaN"; const d = null === (i = null === (o = this._config.entities.fossil_fuel_percentage) || void 0 === o ? void 0 : o.unit_white_space) || void 0 === i || i, c = "percentage" === (null === (a = this._config.entities.fossil_fuel_percentage) || void 0 === a ? void 0 : a.state_type) ? "%" : "W", u = 1 - this.getEntityState(e) / 100; let _, v; _ = "string" == typeof (null === (r = this._config.entities.grid) || void 0 === r ? void 0 : r.entity) ? t : this.getEntityStateWatts(null === (n = this._config.entities.grid) || void 0 === n ? void 0 : n.entity.consumption) || 0; const p = null !== (s = null === (l = this._config.entities.fossil_fuel_percentage) || void 0 === l ? void 0 : l.display_zero_tolerance) && void 0 !== s ? s : 0; if ("W" === c) { let e = _ * u; p && e < p && (e = 0), v = this.displayValue(e, void 0, d) } else { let t = 100 - this.getEntityState(e); p && t < p && (t = 0), v = this.displayValue(t, c, d, 0) } return v }, this.displayValue = (e, t, o, i) => { if (null === e) return "0"; if (Number.isNaN(+e)) return e.toString(); const r = Number(e), n = void 0 === t && r >= this._config.watt_threshold; return `${a(n ? ke(r / 1e3, null != i ? i : this._config.kw_decimals) : ke(r, null != i ? i : this._config.w_decimals), this.hass.locale)}${!1 === o ? "" : " "}${t || (n ? "kW" : "W")}` } } setConfig(e) { var t, o, i, a, r, n, l, s, d, c, u; if (!e.entities || !(null === (o = null === (t = e.entities) || void 0 === t ? void 0 : t.battery) || void 0 === o ? void 0 : o.entity) && !(null === (a = null === (i = e.entities) || void 0 === i ? void 0 : i.grid) || void 0 === a ? void 0 : a.entity) && !(null === (n = null === (r = e.entities) || void 0 === r ? void 0 : r.solar) || void 0 === n ? void 0 : n.entity)) throw new Error("At least one entity for battery, grid or solar must be defined"); this._config = Object.assign(Object.assign({}, e), { kw_decimals: ze(e.kw_decimals, Me.kilowattDecimals), min_flow_rate: ze(e.min_flow_rate, Me.minFlowRate), max_flow_rate: ze(e.max_flow_rate, Me.maxFlowRate), w_decimals: ze(e.w_decimals, Me.wattDecimals), watt_threshold: ze(e.watt_threshold, Me.wattThreshold), max_expected_power: ze(e.max_expected_power, Me.maxExpectedPower), min_expected_power: ze(e.min_expected_power, Me.minExpectedPower), display_zero_lines: { mode: null !== (s = null === (l = e.display_zero_lines) || void 0 === l ? void 0 : l.mode) && void 0 !== s ? s : Me.displayZeroLines.mode, transparency: ze(null === (d = e.display_zero_lines) || void 0 === d ? void 0 : d.transparency, Me.displayZeroLines.transparency), grey_color: null !== (u = null === (c = e.display_zero_lines) || void 0 === c ? void 0 : c.grey_color) && void 0 !== u ? u : Me.displayZeroLines.grey_color } }) } connectedCallback() { super.connectedCallback(), this._tryConnectAll() } disconnectedCallback() { this._tryDisconnectAll() } static async getConfigElement() { return await Promise.resolve().then((function () { return yo })), document.createElement("power-flow-card-plus-editor") } static getStubConfig(e) { return function (e) { function t(t, o) { const i = e.states[t].attributes.friendly_name; return o.some((e => t.includes(e) || (null == i ? void 0 : i.includes(e)))) } const o = Object.keys(e.states).filter((t => { const o = e.states[t]; return o.state && o.attributes && "power" === o.attributes.device_class || o.entity_id.includes("power") })), i = ["grid", "utility", "net", "meter"], a = ["solar", "pv", "photovoltaic", "inverter"], r = ["battery"], n = ["battery_percent", "battery_level", "state_of_charge", "soc", "percentage"], l = o.filter((e => t(e, i)))[0], s = o.filter((e => t(e, a)))[0], d = o.filter((e => t(e, r)))[0], c = Object.keys(e.states).filter((t => { const o = e.states[t]; return o && o.state && o.attributes && "%" === o.attributes.unit_of_measurement })).filter((e => t(e, n)))[0]; return { entities: { battery: { entity: null != d ? d : "", state_of_charge: null != c ? c : "" }, grid: l ? { entity: l } : void 0, solar: s ? { entity: s, display_zero_state: !0 } : void 0 }, clickable_entities: !0, display_zero_lines: !0, use_new_flow_rate_model: !0, w_decimals: Me.wattDecimals, kw_decimals: Me.kilowattDecimals, min_flow_rate: Me.minFlowRate, max_flow_rate: Me.maxFlowRate, max_expected_power: Me.maxExpectedPower, min_expected_power: Me.minExpectedPower, watt_threshold: Me.wattThreshold, transparency_zero_lines: Me.transparencyZeroLines } }(e) } getCardSize() { return 3 } mapRange(e, t, o, i, a) { return e > a ? o : (e - i) * (o - t) / (a - i) + t } openDetails(e, t) { if (e.stopPropagation(), !t || !this._config.clickable_entities) return; if (!this.entityExists(t)) return; const o = new CustomEvent("hass-more-info", { composed: !0, detail: { entityId: t } }); this.dispatchEvent(o) } hasField(e, t) { var o, i; return !!(void 0 !== e && !0 === (null == e ? void 0 : e.display_zero) || Math.abs(this.getEntityStateWatts(null == e ? void 0 : e.entity)) > (null !== (o = null == e ? void 0 : e.display_zero_tolerance) && void 0 !== o ? o : 0) && this.entityAvailable(null == e ? void 0 : e.entity) || t) && "string" == typeof (null === (i = this.hass.states[null == e ? void 0 : e.entity]) || void 0 === i ? void 0 : i.state) } showLine(e) { var t, o; return e > 0 || "hide" !== (null === (o = null === (t = this._config) || void 0 === t ? void 0 : t.display_zero_lines) || void 0 === o ? void 0 : o.mode) } styleLine(e) { var t, o, i, a; if (e > 0) return ""; const r = null === (o = null === (t = this._config) || void 0 === t ? void 0 : t.display_zero_lines) || void 0 === o ? void 0 : o.mode; if ("show" === r || void 0 === r) return ""; let n = ""; if ("transparency" === r || "custom" === r) { const e = null === (a = null === (i = this._config) || void 0 === i ? void 0 : i.display_zero_lines) || void 0 === a ? void 0 : a.transparency; (null == e || e) && (n += "transparency ") } return "grey_out" !== r && "custom" !== r || (n += "grey"), n } computeFieldIcon(e, t) { var o, i; return (null == e ? void 0 : e.icon) ? e.icon : (null == e ? void 0 : e.use_metadata) ? (null === (i = null === (o = this.getEntityStateObj(e.entity)) || void 0 === o ? void 0 : o.attributes) || void 0 === i ? void 0 : i.icon) || "" : t } computeFieldName(e, t) { var o, i; return (null == e ? void 0 : e.name) ? e.name : (null == e ? void 0 : e.use_metadata) ? (null === (i = null === (o = this.getEntityStateObj(e.entity)) || void 0 === o ? void 0 : o.attributes) || void 0 === i ? void 0 : i.friendly_name) || "" : t } convertColorListToHex(e) { return "#".concat(e.map((e => e.toString(16).padStart(2, "0"))).join("")) } render() { var e, t, o, i, a, r, n, l, s, d, c, u, _, v, p, h, y, m, f, g, b, w, x, k, $, z, E, S, C, M, A, P, D, T, O, j, N, G, B, F, I, R, H, L, V, Z, K, Y, J, q, Q, X, ee, te, oe, ie, ae, re, ne, le, se, de, ce, ue, _e, ve, pe, he, ye, me, fe, ge, be, we, ke, Ee, Se, Ce, Me, Ae, Pe, De, Te, Oe, je, Ne, Ge, Be, Fe, Ie, Re, He, Le, Ue, We, Ve, Ze, Ke, Ye, Je, qe, Qe, Xe, et, tt, ot, it, at, rt, nt, lt, st, dt, ct, ut, _t, vt, pt, ht, yt, mt, ft, gt, bt, kt, $t, zt, Et, St, Ct, Mt, At, Pt, Dt, Tt, Ot, jt, Nt, Gt, Bt, Ft, It, Rt, Ht, Lt, Ut, Wt, Vt, Zt, Kt, Yt, Jt, qt, Qt, Xt, eo, to, oo, io, ao, ro, no, lo, so, co, uo, _o, vo, po, ho, yo, mo, fo, go, bo, wo, xo, ko, $o, zo, Eo, So, Co, Mo, Ao, Po, Do, To, Oo, jo, No, Go, Bo, Fo, Io, Ro, Ho, Lo, Uo, Wo, Vo, Zo, Ko, Yo, Jo, qo, Qo, Xo, ei, ti, oi, ii, ai, ri, ni, li, si, di, ci, ui, _i, vi, pi, hi, yi, mi, fi, gi, bi, wi, xi, ki, $i, zi, Ei, Si, Ci, Mi, Ai, Pi, Di, Ti, Oi, ji, Ni, Gi, Bi, Fi, Ii, Ri, Hi, Li, Ui, Wi, Vi, Zi, Ki, Yi, Ji, qi, Qi, Xi, ea, ta, oa, ia, aa, ra, na, la, sa, da, ca, ua, _a, va, pa, ha, ya, ma, fa, ga; if (!this._config || !this.hass) return U``; const { entities: ba } = this._config; this.style.setProperty("--clickable-cursor", this._config.clickable_entities ? "pointer" : "default"); const wa = null, xa = null, ka = { entity: null === (e = ba.grid) || void 0 === e ? void 0 : e.entity, has: void 0 !== (null === (t = null == ba ? void 0 : ba.grid) || void 0 === t ? void 0 : t.entity), hasReturnToGrid: "string" == typeof (null === (o = ba.grid) || void 0 === o ? void 0 : o.entity) || (null === (a = null === (i = ba.grid) || void 0 === i ? void 0 : i.entity) || void 0 === a ? void 0 : a.production), state: { fromGrid: 0, toGrid: wa, toBattery: wa, toHome: wa }, powerOutage: { has: this.hasField(null === (r = ba.grid) || void 0 === r ? void 0 : r.power_outage, !0), isOutage: (ba.grid && (null === (l = this.hass.states[null === (n = ba.grid.power_outage) || void 0 === n ? void 0 : n.entity]) || void 0 === l ? void 0 : l.state)) === (null !== (c = null === (d = null === (s = ba.grid) || void 0 === s ? void 0 : s.power_outage) || void 0 === d ? void 0 : d.state_alert) && void 0 !== c ? c : "on"), icon: (null === (_ = null === (u = ba.grid) || void 0 === u ? void 0 : u.power_outage) || void 0 === _ ? void 0 : _.icon_alert) || "mdi:transmission-tower-off", name: null !== (h = null === (p = null === (v = ba.grid) || void 0 === v ? void 0 : v.power_outage) || void 0 === p ? void 0 : p.label_alert) && void 0 !== h ? h : U`Power<br>Outage`, entityGenerator: null === (m = null === (y = ba.grid) || void 0 === y ? void 0 : y.power_outage) || void 0 === m ? void 0 : m.entity_generator }, icon: this.computeFieldIcon(ba.grid, "mdi:transmission-tower"), name: this.computeFieldName(ba.grid, this.hass.localize("ui.panel.lovelace.cards.energy.energy_distribution.grid")), mainEntity: "object" == typeof (null === (f = ba.grid) || void 0 === f ? void 0 : f.entity) ? ba.grid.entity.consumption || ba.grid.entity.production : null === (g = ba.grid) || void 0 === g ? void 0 : g.entity, color: { fromGrid: null === (w = null === (b = ba.grid) || void 0 === b ? void 0 : b.color) || void 0 === w ? void 0 : w.consumption, toGrid: null === (k = null === (x = ba.grid) || void 0 === x ? void 0 : x.color) || void 0 === k ? void 0 : k.production, icon_type: null === ($ = ba.grid) || void 0 === $ ? void 0 : $.color_icon, circle_type: null === (z = ba.grid) || void 0 === z ? void 0 : z.color_circle }, secondary: { entity: null === (S = null === (E = ba.grid) || void 0 === E ? void 0 : E.secondary_info) || void 0 === S ? void 0 : S.entity, decimals: null === (M = null === (C = ba.grid) || void 0 === C ? void 0 : C.secondary_info) || void 0 === M ? void 0 : M.decimals, template: null === (P = null === (A = ba.grid) || void 0 === A ? void 0 : A.secondary_info) || void 0 === P ? void 0 : P.template, has: this.hasField(null === (D = ba.grid) || void 0 === D ? void 0 : D.secondary_info, !0), state: xa, icon: null === (O = null === (T = ba.grid) || void 0 === T ? void 0 : T.secondary_info) || void 0 === O ? void 0 : O.icon, unit: null === (N = null === (j = ba.grid) || void 0 === j ? void 0 : j.secondary_info) || void 0 === N ? void 0 : N.unit_of_measurement, unit_white_space: null === (B = null === (G = ba.grid) || void 0 === G ? void 0 : G.secondary_info) || void 0 === B ? void 0 : B.unit_white_space, color: { type: null === (I = null === (F = ba.grid) || void 0 === F ? void 0 : F.secondary_info) || void 0 === I ? void 0 : I.color_value } } }, $a = { entity: null === (R = ba.solar) || void 0 === R ? void 0 : R.entity, has: void 0 !== (null === (H = ba.solar) || void 0 === H ? void 0 : H.entity), state: { total: wa, toHome: wa, toGrid: wa, toBattery: wa }, icon: this.computeFieldIcon(ba.solar, "mdi:solar-power"), name: this.computeFieldName(ba.solar, this.hass.localize("ui.panel.lovelace.cards.energy.energy_distribution.solar")), secondary: { entity: null === (V = null === (L = ba.solar) || void 0 === L ? void 0 : L.secondary_info) || void 0 === V ? void 0 : V.entity, decimals: null === (K = null === (Z = ba.solar) || void 0 === Z ? void 0 : Z.secondary_info) || void 0 === K ? void 0 : K.decimals, template: null === (J = null === (Y = ba.solar) || void 0 === Y ? void 0 : Y.secondary_info) || void 0 === J ? void 0 : J.template, has: this.hasField(null === (q = ba.solar) || void 0 === q ? void 0 : q.secondary_info, !0), state: xa, icon: null === (X = null === (Q = ba.solar) || void 0 === Q ? void 0 : Q.secondary_info) || void 0 === X ? void 0 : X.icon, unit: null === (te = null === (ee = ba.solar) || void 0 === ee ? void 0 : ee.secondary_info) || void 0 === te ? void 0 : te.unit_of_measurement, unit_white_space: null === (ie = null === (oe = ba.solar) || void 0 === oe ? void 0 : oe.secondary_info) || void 0 === ie ? void 0 : ie.unit_white_space } }, za = { entity: null === (ae = ba.battery) || void 0 === ae ? void 0 : ae.entity, has: void 0 !== (null === (re = null == ba ? void 0 : ba.battery) || void 0 === re ? void 0 : re.entity), mainEntity: "object" == typeof (null === (ne = ba.battery) || void 0 === ne ? void 0 : ne.entity) ? ba.battery.entity.consumption : null === (le = ba.battery) || void 0 === le ? void 0 : le.entity, name: this.computeFieldName(ba.battery, this.hass.localize("ui.panel.lovelace.cards.energy.energy_distribution.battery")), icon: this.computeFieldIcon(ba.battery, "mdi:battery-high"), state_of_charge: { state: (null === (de = null === (se = ba.battery) || void 0 === se ? void 0 : se.state_of_charge) || void 0 === de ? void 0 : de.length) ? this.getEntityState(null === (ce = ba.battery) || void 0 === ce ? void 0 : ce.state_of_charge) : null, unit: (null === (ue = null == ba ? void 0 : ba.battery) || void 0 === ue ? void 0 : ue.state_of_charge_unit) || "%", unit_white_space: (null === (_e = null == ba ? void 0 : ba.battery) || void 0 === _e ? void 0 : _e.state_of_charge_unit_white_space) || !0, decimals: (null === (ve = null == ba ? void 0 : ba.battery) || void 0 === ve ? void 0 : ve.state_of_charge_decimals) || 0 }, state: { toBattery: 0, fromBattery: 0, toGrid: 0, toHome: 0 }, color: { fromBattery: null === (he = null === (pe = ba.battery) || void 0 === pe ? void 0 : pe.color) || void 0 === he ? void 0 : he.consumption, toBattery: null === (me = null === (ye = ba.battery) || void 0 === ye ? void 0 : ye.color) || void 0 === me ? void 0 : me.production, icon_type: void 0, circle_type: null === (fe = ba.battery) || void 0 === fe ? void 0 : fe.color_circle } }, Ea = { entity: null === (ge = ba.home) || void 0 === ge ? void 0 : ge.entity, has: void 0 !== (null === (be = null == ba ? void 0 : ba.home) || void 0 === be ? void 0 : be.entity), state: wa, icon: this.computeFieldIcon(null == ba ? void 0 : ba.home, "mdi:home"), name: this.computeFieldName(null == ba ? void 0 : ba.home, this.hass.localize("ui.panel.lovelace.cards.energy.energy_distribution.home")), color: { icon_type: null === (we = ba.home) || void 0 === we ? void 0 : we.color_icon }, secondary: { entity: null === (Ee = null === (ke = ba.home) || void 0 === ke ? void 0 : ke.secondary_info) || void 0 === Ee ? void 0 : Ee.entity, template: null === (Ce = null === (Se = ba.home) || void 0 === Se ? void 0 : Se.secondary_info) || void 0 === Ce ? void 0 : Ce.template, has: this.hasField(null === (Me = ba.home) || void 0 === Me ? void 0 : Me.secondary_info, !0), state: null, unit: null === (Pe = null === (Ae = ba.home) || void 0 === Ae ? void 0 : Ae.secondary_info) || void 0 === Pe ? void 0 : Pe.unit_of_measurement, unit_white_space: null === (Te = null === (De = ba.home) || void 0 === De ? void 0 : De.secondary_info) || void 0 === Te ? void 0 : Te.unit_white_space, icon: null === (je = null === (Oe = ba.home) || void 0 === Oe ? void 0 : Oe.secondary_info) || void 0 === je ? void 0 : je.icon, decimals: null === (Ge = null === (Ne = ba.home) || void 0 === Ne ? void 0 : Ne.secondary_info) || void 0 === Ge ? void 0 : Ge.decimals } }, Sa = e => { var t, o, i, a, r, n, l, s, d, c, u, _, v, p, h, y, m, f, g, b, w, x, k, $, z, E; return { entity: null === (t = ba[e]) || void 0 === t ? void 0 : t.entity, has: this.hasField(ba[e]), displayZero: null === (o = ba[e]) || void 0 === o ? void 0 : o.display_zero, displayZeroTolerance: null === (i = ba[e]) || void 0 === i ? void 0 : i.display_zero_tolerance, state: wa, icon: this.computeFieldIcon(ba[e], "individual1" === e ? "mdi:car-electric" : "mdi:motorbike-electric"), name: this.computeFieldName(ba[e], wt("individual1" === e ? "card.label.car" : "card.label.motorbike")), color: null === (a = ba[e]) || void 0 === a ? void 0 : a.color, unit: null === (r = ba[e]) || void 0 === r ? void 0 : r.unit_of_measurement, unit_white_space: null === (n = ba[e]) || void 0 === n ? void 0 : n.unit_white_space, decimals: null === (l = ba[e]) || void 0 === l ? void 0 : l.decimals, invertAnimation: (null === (s = ba[e]) || void 0 === s ? void 0 : s.inverted_animation) || !1, showDirection: (null === (d = ba[e]) || void 0 === d ? void 0 : d.show_direction) || !1, secondary: { entity: null === (u = null === (c = ba[e]) || void 0 === c ? void 0 : c.secondary_info) || void 0 === u ? void 0 : u.entity, template: null === (v = null === (_ = ba[e]) || void 0 === _ ? void 0 : _.secondary_info) || void 0 === v ? void 0 : v.template, has: this.hasField(null === (p = ba[e]) || void 0 === p ? void 0 : p.secondary_info, !0), state: xa, icon: null === (y = null === (h = ba[e]) || void 0 === h ? void 0 : h.secondary_info) || void 0 === y ? void 0 : y.icon, unit: null === (f = null === (m = ba[e]) || void 0 === m ? void 0 : m.secondary_info) || void 0 === f ? void 0 : f.unit_of_measurement, unit_white_space: null === (b = null === (g = ba[e]) || void 0 === g ? void 0 : g.secondary_info) || void 0 === b ? void 0 : b.unit_white_space, displayZero: null === (x = null === (w = ba[e]) || void 0 === w ? void 0 : w.secondary_info) || void 0 === x ? void 0 : x.display_zero, displayZeroTolerance: null === ($ = null === (k = ba[e]) || void 0 === k ? void 0 : k.secondary_info) || void 0 === $ ? void 0 : $.display_zero_tolerance, decimals: null === (E = null === (z = ba[e]) || void 0 === z ? void 0 : z.secondary_info) || void 0 === E ? void 0 : E.decimals } } }, Ca = Sa("individual1"), Ma = Sa("individual2"), Aa = { entity: null === (Be = ba.fossil_fuel_percentage) || void 0 === Be ? void 0 : Be.entity, name: (null === (Fe = ba.fossil_fuel_percentage) || void 0 === Fe ? void 0 : Fe.name) || (null === (Ie = ba.fossil_fuel_percentage) || void 0 === Ie ? void 0 : Ie.use_metadata) && (null === (Re = this.getEntityStateObj(ba.fossil_fuel_percentage.entity)) || void 0 === Re ? void 0 : Re.attributes.friendly_name) || this.hass.localize("ui.panel.lovelace.cards.energy.energy_distribution.low_carbon"), icon: (null === (He = ba.fossil_fuel_percentage) || void 0 === He ? void 0 : He.icon) || (null === (Le = ba.fossil_fuel_percentage) || void 0 === Le ? void 0 : Le.use_metadata) && (null === (We = null === (Ue = this.getEntityStateObj(ba.fossil_fuel_percentage.entity)) || void 0 === Ue ? void 0 : Ue.attributes) || void 0 === We ? void 0 : We.icon) || "mdi:leaf", has: !1, hasPercentage: !1, state: { power: wa }, color: null === (Ve = ba.fossil_fuel_percentage) || void 0 === Ve ? void 0 : Ve.color, color_value: null === (Ze = ba.fossil_fuel_percentage) || void 0 === Ze ? void 0 : Ze.color_value, secondary: { entity: null === (Ye = null === (Ke = ba.fossil_fuel_percentage) || void 0 === Ke ? void 0 : Ke.secondary_info) || void 0 === Ye ? void 0 : Ye.entity, decimals: null === (qe = null === (Je = ba.fossil_fuel_percentage) || void 0 === Je ? void 0 : Je.secondary_info) || void 0 === qe ? void 0 : qe.decimals, template: null === (Xe = null === (Qe = ba.fossil_fuel_percentage) || void 0 === Qe ? void 0 : Qe.secondary_info) || void 0 === Xe ? void 0 : Xe.template, has: this.hasField(null === (et = ba.fossil_fuel_percentage) || void 0 === et ? void 0 : et.secondary_info, !0), state: xa, icon: null === (ot = null === (tt = ba.fossil_fuel_percentage) || void 0 === tt ? void 0 : tt.secondary_info) || void 0 === ot ? void 0 : ot.icon, unit: null === (at = null === (it = ba.fossil_fuel_percentage) || void 0 === it ? void 0 : it.secondary_info) || void 0 === at ? void 0 : at.unit_of_measurement, unit_white_space: null === (nt = null === (rt = ba.fossil_fuel_percentage) || void 0 === rt ? void 0 : rt.secondary_info) || void 0 === nt ? void 0 : nt.unit_white_space, color_value: null === (st = null === (lt = ba.fossil_fuel_percentage) || void 0 === lt ? void 0 : lt.secondary_info) || void 0 === st ? void 0 : st.color_value } }; if (ka.has && ("string" == typeof ba.grid.entity ? this.entityInverted("grid") ? ka.state.fromGrid = Math.abs(Math.min(this.getEntityStateWatts(null === (dt = ba.grid) || void 0 === dt ? void 0 : dt.entity), 0)) : ka.state.fromGrid = Math.max(this.getEntityStateWatts(null === (ct = ba.grid) || void 0 === ct ? void 0 : ct.entity), 0) : ka.state.fromGrid = this.getEntityStateWatts(ba.grid.entity.consumption)), ka.hasReturnToGrid && ("string" == typeof ba.grid.entity ? ka.state.toGrid = this.entityInverted("grid") ? Math.max(this.getEntityStateWatts(ba.grid.entity), 0) : Math.abs(Math.min(this.getEntityStateWatts(ba.grid.entity), 0)) : ka.state.toGrid = this.getEntityStateWatts(null === (ut = ba.grid) || void 0 === ut ? void 0 : ut.entity.production)), this.style.setProperty("--secondary-text-solar-color", (null === (vt = null === (_t = ba.solar) || void 0 === _t ? void 0 : _t.secondary_info) || void 0 === vt ? void 0 : vt.color_value) ? "var(--energy-solar-color)" : "var(--primary-text-color)"), $a.secondary.has) { const e = this.hass.states[null === (ht = null === (pt = ba.solar) || void 0 === pt ? void 0 : pt.secondary_info) || void 0 === ht ? void 0 : ht.entity].state; Number.isNaN(+e) ? $a.secondary.state = e : $a.secondary.state = Math.max(Number(e), 0) } if (void 0 !== (null === (yt = ba.solar) || void 0 === yt ? void 0 : yt.color)) { let e = null === (mt = ba.solar) || void 0 === mt ? void 0 : mt.color; "object" == typeof e && (e = this.convertColorListToHex(e)), this.style.setProperty("--energy-solar-color", e || "#ff9800") } this.style.setProperty("--icon-solar-color", (null === (ft = ba.solar) || void 0 === ft ? void 0 : ft.color_icon) ? "var(--energy-solar-color)" : "var(--primary-text-color)"), $a.has && (this.entityInverted("solar") ? $a.state.total = Math.abs(Math.min(this.getEntityStateWatts(null === (gt = ba.solar) || void 0 === gt ? void 0 : gt.entity), 0)) : $a.state.total = Math.max(this.getEntityStateWatts(null === (bt = ba.solar) || void 0 === bt ? void 0 : bt.entity), 0), (null === (kt = ba.solar) || void 0 === kt ? void 0 : kt.display_zero_tolerance) && ba.solar.display_zero_tolerance >= $a.state.total && ($a.state.total = 0)), za.has && ("string" == typeof (null === ($t = ba.battery) || void 0 === $t ? void 0 : $t.entity) ? (za.state.toBattery = this.entityInverted("battery") ? Math.max(this.getEntityStateWatts(ba.battery.entity), 0) : Math.abs(Math.min(this.getEntityStateWatts(ba.battery.entity), 0)), za.state.fromBattery = this.entityInverted("battery") ? Math.abs(Math.min(this.getEntityStateWatts(ba.battery.entity), 0)) : Math.max(this.getEntityStateWatts(ba.battery.entity), 0)) : (za.state.toBattery = this.getEntityStateWatts(null === (Et = null === (zt = ba.battery) || void 0 === zt ? void 0 : zt.entity) || void 0 === Et ? void 0 : Et.production), za.state.fromBattery = this.getEntityStateWatts(null === (Ct = null === (St = ba.battery) || void 0 === St ? void 0 : St.entity) || void 0 === Ct ? void 0 : Ct.consumption)), (null === (Mt = null == ba ? void 0 : ba.battery) || void 0 === Mt ? void 0 : Mt.display_zero_tolerance) && (ba.battery.display_zero_tolerance >= za.state.toBattery && (za.state.toBattery = 0), ba.battery.display_zero_tolerance >= za.state.fromBattery && (za.state.fromBattery = 0))), $a.has && ($a.state.toHome = (null !== (At = $a.state.total) && void 0 !== At ? At : 0) - (null !== (Pt = ka.state.toGrid) && void 0 !== Pt ? Pt : 0) - (null !== (Dt = za.state.toBattery) && void 0 !== Dt ? Dt : 0), (null === (Tt = ba.solar) || void 0 === Tt ? void 0 : Tt.display_zero_tolerance) && ba.solar.display_zero_tolerance >= ($a.state.total || 0) && ($a.state.toHome = 0)); const Pa = Math.max(null !== (jt = null === (Ot = ba.grid) || void 0 === Ot ? void 0 : Ot.display_zero_tolerance) && void 0 !== jt ? jt : 0, null !== (Gt = null === (Nt = ba.battery) || void 0 === Nt ? void 0 : Nt.display_zero_tolerance) && void 0 !== Gt ? Gt : 0); if (null !== $a.state.toHome && $a.state.toHome < 0 ? (za.has && (ka.state.toBattery = Math.abs($a.state.toHome), ka.state.toBattery > (null !== (Bt = ka.state.fromGrid) && void 0 !== Bt ? Bt : 0) && (za.state.toGrid = Math.min(ka.state.toBattery - (null !== (Ft = ka.state.fromGrid) && void 0 !== Ft ? Ft : 0), 0), ka.state.toBattery = ka.state.fromGrid)), $a.state.toHome = 0) : !$a.has && za.state.toBattery && za.state.toBattery > 0 && (ka.state.toBattery = za.state.toBattery), ka.state.toBattery = (null !== (It = ka.state.toBattery) && void 0 !== It ? It : 0) > Pa ? ka.state.toBattery : 0, za.has && ($a.has ? (za.state.toGrid || (za.state.toGrid = Math.max(0, (ka.state.toGrid || 0) - ($a.state.total || 0) - (za.state.toBattery || 0) - (ka.state.toBattery || 0))), $a.state.toBattery = za.state.toBattery - (ka.state.toBattery || 0), (null === (Rt = ba.solar) || void 0 === Rt ? void 0 : Rt.display_zero_tolerance) && ba.solar.display_zero_tolerance >= ($a.state.total || 0) && ($a.state.toBattery = 0)) : za.state.toGrid = ka.state.toGrid || 0, za.state.toGrid = (za.state.toGrid || 0) > Pa && za.state.toGrid || 0, za.state.toHome = (null !== (Ht = za.state.fromBattery) && void 0 !== Ht ? Ht : 0) - (null !== (Lt = za.state.toGrid) && void 0 !== Lt ? Lt : 0)), ka.state.toHome = Math.max(ka.state.fromGrid - (null !== (Ut = ka.state.toBattery) && void 0 !== Ut ? Ut : 0), 0), $a.has && ka.state.toGrid && ($a.state.toGrid = ka.state.toGrid - (null !== (Wt = za.state.toGrid) && void 0 !== Wt ? Wt : 0)), (null === (Vt = ba.solar) || void 0 === Vt ? void 0 : Vt.display_zero_tolerance) && ba.solar.display_zero_tolerance >= ($a.state.total || 0) && ($a.state.toGrid = 0), this.style.setProperty("--text-solar-color", (null === (Zt = ba.solar) || void 0 === Zt ? void 0 : Zt.color_value) ? "var(--energy-solar-color)" : "var(--primary-text-color)"), void 0 !== ka.color.fromGrid && "object" == typeof ka.color.fromGrid && (ka.color.fromGrid = this.convertColorListToHex(ka.color.fromGrid)), ka.secondary.has) { const e = this.hass.states[null === (Yt = null === (Kt = ba.grid) || void 0 === Kt ? void 0 : Kt.secondary_info) || void 0 === Yt ? void 0 : Yt.entity].state; Number.isNaN(+e) ? ka.secondary.state = e : ka.secondary.state = Math.max(Number(e), 0) } if (void 0 !== ka.color.toGrid && ("object" == typeof ka.color.toGrid && (ka.color.toGrid = this.convertColorListToHex(ka.color.toGrid)), this.style.setProperty("--energy-grid-return-color", ka.color.toGrid || "#a280db")), void 0 !== ka.color.fromGrid && ("object" == typeof ka.color.fromGrid && (ka.color.fromGrid = this.convertColorListToHex(ka.color.fromGrid)), this.style.setProperty("--energy-grid-consumption-color", ka.color.fromGrid || "#a280db")), void 0 !== (null === (Jt = ba.grid) || void 0 === Jt ? void 0 : Jt.display_zero_tolerance) && ($a.state.toGrid = (null !== (qt = $a.state.toGrid) && void 0 !== qt ? qt : 0) > (null === (Qt = ba.grid) || void 0 === Qt ? void 0 : Qt.display_zero_tolerance) ? $a.state.toGrid : 0, ka.state.toGrid = (null !== (Xt = ka.state.toGrid) && void 0 !== Xt ? Xt : 0) > (null === (eo = ba.grid) || void 0 === eo ? void 0 : eo.display_zero_tolerance) ? ka.state.toGrid : 0, ka.state.fromGrid <= (null === (to = ba.grid) || void 0 === to ? void 0 : to.display_zero_tolerance) && (ka.state.fromGrid = 0, ka.state.toHome = 0, ka.state.toBattery = 0)), this.style.setProperty("--icon-grid-color", "consumption" === ka.color.icon_type ? "var(--energy-grid-consumption-color)" : "production" === ka.color.icon_type ? "var(--energy-grid-return-color)" : !0 === ka.color.icon_type ? (null !== (oo = ka.state.fromGrid) && void 0 !== oo ? oo : 0) >= (null !== (io = ka.state.toGrid) && void 0 !== io ? io : 0) ? "var(--energy-grid-consumption-color)" : "var(--energy-grid-return-color)" : "var(--primary-text-color)"), this.style.setProperty("--secondary-text-grid-color", "consumption" === ka.secondary.color.type ? "var(--energy-grid-consumption-color)" : "production" === ka.secondary.color.type ? "var(--energy-grid-return-color)" : !0 === ka.secondary.color.type ? (null !== (ao = ka.state.fromGrid) && void 0 !== ao ? ao : 0) >= (null !== (ro = ka.state.toGrid) && void 0 !== ro ? ro : 0) ? "var(--energy-grid-consumption-color)" : "var(--energy-grid-return-color)" : "var(--primary-text-color)"), this.style.setProperty("--circle-grid-color", "consumption" === ka.color.circle_type ? "var(--energy-grid-consumption-color)" : "production" === ka.color.circle_type ? "var(--energy-grid-return-color)" : !0 === ka.color.circle_type ? (null !== (no = ka.state.fromGrid) && void 0 !== no ? no : 0) >= (null !== (lo = ka.state.toGrid) && void 0 !== lo ? lo : 0) ? "var(--energy-grid-consumption-color)" : "var(--energy-grid-return-color)" : "var(--energy-grid-consumption-color)"), void 0 !== Ca.color && ("object" == typeof Ca.color && (Ca.color = this.convertColorListToHex(Ca.color)), this.style.setProperty("--individualone-color", Ca.color)), this.style.setProperty("--icon-individualone-color", (null === (so = ba.individual1) || void 0 === so ? void 0 : so.color_icon) ? "var(--individualone-color)" : "var(--primary-text-color)"), Ca.has) { const e = this.getEntityStateWatts(null === (co = ba.individual1) || void 0 === co ? void 0 : co.entity); e < 0 && (Ca.invertAnimation = !Ca.invertAnimation), Ca.state = Math.abs(e) } if (Ca.secondary.has) { const e = this.hass.states[null === (_o = null === (uo = ba.individual1) || void 0 === uo ? void 0 : uo.secondary_info) || void 0 === _o ? void 0 : _o.entity].state; "number" == typeof e ? Ca.secondary.state = Math.max(e, 0) : "string" == typeof e && (Ca.secondary.state = e) } if (void 0 !== Aa.entity && (Aa.hasPercentage = void 0 !== (null === (vo = ba.fossil_fuel_percentage) || void 0 === vo ? void 0 : vo.entity) && !0 === (null === (po = ba.fossil_fuel_percentage) || void 0 === po ? void 0 : po.display_zero) || 1 * (null !== (ho = ka.state.fromGrid) && void 0 !== ho ? ho : 0) - this.getEntityState(null === (yo = ba.fossil_fuel_percentage) || void 0 === yo ? void 0 : yo.entity) / 100 > 0 && void 0 !== (null === (mo = ba.fossil_fuel_percentage) || void 0 === mo ? void 0 : mo.entity) && this.entityAvailable(null === (fo = ba.fossil_fuel_percentage) || void 0 === fo ? void 0 : fo.entity)), void 0 !== Ma.color && ("object" == typeof Ma.color && (Ma.color = this.convertColorListToHex(Ma.color)), this.style.setProperty("--individualtwo-color", Ma.color)), this.style.setProperty("--icon-individualtwo-color", (null === (go = ba.individual2) || void 0 === go ? void 0 : go.color_icon) ? "var(--individualtwo-color)" : "var(--primary-text-color)"), Ma.has) { const e = this.getEntityStateWatts(null === (bo = ba.individual2) || void 0 === bo ? void 0 : bo.entity); e < 0 && (Ma.invertAnimation = !Ma.invertAnimation), Ma.state = Math.abs(e) } if (Ma.secondary.has) { const e = this.hass.states[null === (xo = null === (wo = ba.individual2) || void 0 === wo ? void 0 : wo.secondary_info) || void 0 === xo ? void 0 : xo.entity].state; "number" == typeof e ? Ma.secondary.state = Math.max(e, 0) : "string" == typeof e && (Ma.secondary.state = e) } if (Ea.secondary.has) { const e = this.hass.states[null === ($o = null === (ko = ba.home) || void 0 === ko ? void 0 : ko.secondary_info) || void 0 === $o ? void 0 : $o.entity].state; Number.isNaN(+e) ? Ea.secondary.state = e : Ea.secondary.state = Math.max(Number(e), 0) } void 0 !== za.color.fromBattery && ("object" == typeof za.color.fromBattery && (za.color.fromBattery = this.convertColorListToHex(za.color.fromBattery)), this.style.setProperty("--energy-battery-out-color", za.color.fromBattery || "#4db6ac")), void 0 !== za.color.toBattery && ("object" == typeof za.color.toBattery && (za.color.toBattery = this.convertColorListToHex(za.color.toBattery)), this.style.setProperty("--energy-battery-in-color", za.color.toBattery || "#a280db")), za.color.icon_type = null === (zo = ba.battery) || void 0 === zo ? void 0 : zo.color_icon, this.style.setProperty("--icon-battery-color", "consumption" === za.color.icon_type ? "var(--energy-battery-in-color)" : "production" === za.color.icon_type ? "var(--energy-battery-out-color)" : !0 === za.color.icon_type ? za.state.fromBattery >= za.state.toBattery ? "var(--energy-battery-out-color)" : "var(--energy-battery-in-color)" : "var(--primary-text-color)"); const Da = null === (Eo = ba.battery) || void 0 === Eo ? void 0 : Eo.color_state_of_charge_value; this.style.setProperty("--text-battery-state-of-charge-color", "consumption" === Da ? "var(--energy-battery-in-color)" : "production" === Da ? "var(--energy-battery-out-color)" : !0 === Da ? za.state.fromBattery >= za.state.toBattery ? "var(--energy-battery-out-color)" : "var(--energy-battery-in-color)" : "var(--primary-text-color)"), this.style.setProperty("--circle-battery-color", "consumption" === za.color.circle_type ? "var(--energy-battery-in-color)" : "production" === za.color.circle_type || !0 === za.color.circle_type && za.state.fromBattery >= za.state.toBattery ? "var(--energy-battery-out-color)" : "var(--energy-battery-in-color)"); const Ta = ze(Ca.state, 0) * (Ca.invertAnimation ? -1 : 1) + ze(Ma.state, 0) * (Ma.invertAnimation ? -1 : 1), Oa = Math.max(ka.state.toHome + (null !== (So = $a.state.toHome) && void 0 !== So ? So : 0) + (null !== (Co = za.state.toHome) && void 0 !== Co ? Co : 0), 0); let ja = 0; za.state.toHome && (ja = xt * (za.state.toHome / Oa)); let Na = 0; if ($a.has && (Na = xt * ($a.state.toHome / Oa)), Aa.secondary.has) { const e = this.hass.states[null === (Ao = null === (Mo = ba.fossil_fuel_percentage) || void 0 === Mo ? void 0 : Mo.secondary_info) || void 0 === Ao ? void 0 : Ao.entity].state; "number" == typeof e ? Aa.secondary.state = Math.max(e, 0) : "string" == typeof e && (Aa.secondary.state = e) } let Ga = 0; if (Aa.has = 1 * ka.state.toHome - this.getEntityState(null === (Po = ba.fossil_fuel_percentage) || void 0 === Po ? void 0 : Po.entity) / 100 > 0 && void 0 !== (null === (Do = ba.fossil_fuel_percentage) || void 0 === Do ? void 0 : Do.entity) && this.entityAvailable(null === (To = ba.fossil_fuel_percentage) || void 0 === To ? void 0 : To.entity), Aa.has) { const e = 1 - this.getEntityState(null === (Oo = ba.fossil_fuel_percentage) || void 0 === Oo ? void 0 : Oo.entity) / 100; Aa.state.power = ka.state.toHome * e, Ga = xt * (Aa.state.power / Oa) } Aa.hasPercentage = void 0 !== (null === (jo = ba.fossil_fuel_percentage) || void 0 === jo ? void 0 : jo.entity) && !0 === (null === (No = ba.fossil_fuel_percentage) || void 0 === No ? void 0 : No.display_zero) || Aa.has, ka.powerOutage.isOutage && (ka.state.fromGrid = ka.powerOutage.entityGenerator ? Math.max(this.getEntityStateWatts(ka.powerOutage.entityGenerator), 0) : 0, ka.state.toHome = Math.max(ka.state.fromGrid - (null !== (Go = ka.state.toBattery) && void 0 !== Go ? Go : 0), 0), ka.state.toGrid = 0, za.state.toGrid = 0, $a.state.toGrid = 0, ka.icon = ka.powerOutage.icon, Aa.has = !1, Aa.hasPercentage = !1); const Ba = ka.state.toHome + (null !== (Bo = $a.state.toHome) && void 0 !== Bo ? Bo : 0) + (null !== (Fo = $a.state.toGrid) && void 0 !== Fo ? Fo : 0) + (null !== (Io = $a.state.toBattery) && void 0 !== Io ? Io : 0) + (null !== (Ro = za.state.toHome) && void 0 !== Ro ? Ro : 0) + (null !== (Ho = ka.state.toBattery) && void 0 !== Ho ? Ho : 0) + (null !== (Lo = za.state.toGrid) && void 0 !== Lo ? Lo : 0); null === za.state_of_charge.state ? za.icon = "mdi:battery" : za.state_of_charge.state <= 72 && za.state_of_charge.state > 44 ? za.icon = "mdi:battery-medium" : za.state_of_charge.state <= 44 && za.state_of_charge.state > 16 ? za.icon = "mdi:battery-low" : za.state_of_charge.state <= 16 && (za.icon = "mdi:battery-outline"), void 0 !== (null === (Uo = ba.battery) || void 0 === Uo ? void 0 : Uo.icon) && (za.icon = null === (Wo = ba.battery) || void 0 === Wo ? void 0 : Wo.icon); const Fa = { batteryGrid: this.circleRate(null !== (Zo = null !== (Vo = ka.state.toBattery) && void 0 !== Vo ? Vo : za.state.toGrid) && void 0 !== Zo ? Zo : 0, Ba), batteryToHome: this.circleRate(null !== (Ko = za.state.toHome) && void 0 !== Ko ? Ko : 0, Ba), gridToHome: this.circleRate(ka.state.toHome, Ba), solarToBattery: this.circleRate(null !== (Yo = $a.state.toBattery) && void 0 !== Yo ? Yo : 0, Ba), solarToGrid: this.circleRate(null !== (Jo = $a.state.toGrid) && void 0 !== Jo ? Jo : 0, Ba), solarToHome: this.circleRate(null !== (qo = $a.state.toHome) && void 0 !== qo ? qo : 0, Ba), individual1: this.circleRate(null !== (Qo = Ca.state) && void 0 !== Qo ? Qo : 0, Ta), individual2: this.circleRate(null !== (Xo = Ma.state) && void 0 !== Xo ? Xo : 0, Ta), nonFossil: this.circleRate(null !== (ei = Aa.state.power) && void 0 !== ei ? ei : 0, Ba) };["batteryGrid", "batteryToHome", "gridToHome", "solarToBattery", "solarToGrid", "solarToHome"].forEach((e => { const t = this[`${e}Flow`]; t && this.previousDur[e] && this.previousDur[e] !== Fa[e] && (t.pauseAnimations(), t.setCurrentTime(t.getCurrentTime() * (Fa[e] / this.previousDur[e])), t.unpauseAnimations()), this.previousDur[e] = Fa[e] })), void 0 !== Aa.color && ("object" == typeof Aa.color && (Aa.color = this.convertColorListToHex(Aa.color)), this.style.setProperty("--non-fossil-color", Aa.color || "var(--energy-non-fossil-color)")), this.style.setProperty("--icon-non-fossil-color", (null === (ti = ba.fossil_fuel_percentage) || void 0 === ti ? void 0 : ti.color_icon) ? "var(--non-fossil-color)" : "var(--primary-text-color)"); const Ia = e => void 0 === e.state ? "" : this.displayValue(e.state, e.unit, e.unit_white_space, e.decimals), Ra = Ia(Ca), Ha = Ia(Ma); if (this.style.setProperty("--text-non-fossil-color", (null === (oi = ba.fossil_fuel_percentage) || void 0 === oi ? void 0 : oi.color_value) ? "var(--non-fossil-color)" : "var(--primary-text-color)"), this.style.setProperty("--secondary-text-non-fossil-color", (null === (ai = null === (ii = ba.fossil_fuel_percentage) || void 0 === ii ? void 0 : ii.secondary_info) || void 0 === ai ? void 0 : ai.color_value) ? "var(--non-fossil-color)" : "var(--primary-text-color)"), this.style.setProperty("--text-individualone-color", (null === (ri = ba.individual1) || void 0 === ri ? void 0 : ri.color_value) ? "var(--individualone-color)" : "var(--primary-text-color)"), this.style.setProperty("--text-individualtwo-color", (null === (ni = ba.individual2) || void 0 === ni ? void 0 : ni.color_value) ? "var(--individualtwo-color)" : "var(--primary-text-color)"), this.style.setProperty("--secondary-text-individualone-color", (null === (si = null === (li = ba.individual1) || void 0 === li ? void 0 : li.secondary_info) || void 0 === si ? void 0 : si.color_value) ? "var(--individualone-color)" : "var(--primary-text-color)"), this.style.setProperty("--secondary-text-individualtwo-color", (null === (ci = null === (di = ba.individual2) || void 0 === di ? void 0 : di.secondary_info) || void 0 === ci ? void 0 : ci.color_value) ? "var(--individualtwo-color)" : "var(--primary-text-color)"), this.style.setProperty("--secondary-text-home-color", (null === (_i = null === (ui = ba.home) || void 0 === ui ? void 0 : ui.secondary_info) || void 0 === _i ? void 0 : _i.color_value) ? "var(--text-home-color)" : "var(--primary-text-color)"), this.style.setProperty("--transparency-unused-lines", (null === (pi = null === (vi = this._config) || void 0 === vi ? void 0 : vi.display_zero_lines) || void 0 === pi ? void 0 : pi.transparency) ? this._config.display_zero_lines.transparency.toString() : "0"), this.style.setProperty("--battery-grid-line", ka.state.toBattery ? "var(--energy-grid-consumption-color)" : "var(--energy-grid-return-color)"), !1 === (null === (hi = ba.grid) || void 0 === hi ? void 0 : hi.color_value) ? (this.style.setProperty("--text-grid-consumption-color", "var(--primary-text-color)"), this.style.setProperty("--text-grid-return-color", "var(--primary-text-color)")) : (this.style.setProperty("--text-grid-consumption-color", "var(--energy-grid-consumption-color)"), this.style.setProperty("--text-grid-return-color", "var(--energy-grid-return-color)")), !1 === (null === (yi = ba.battery) || void 0 === yi ? void 0 : yi.color_value) ? (this.style.setProperty("--text-battery-in-color", "var(--primary-text-color)"), this.style.setProperty("--text-battery-out-color", "var(--primary-text-color)")) : (this.style.setProperty("--text-battery-in-color", "var(--energy-battery-in-color)"), this.style.setProperty("--text-battery-out-color", "var(--energy-battery-out-color)")), void 0 !== (null === (mi = this._config.display_zero_lines) || void 0 === mi ? void 0 : mi.grey_color)) { let e = this._config.display_zero_lines.grey_color; "object" == typeof e && (e = this.convertColorListToHex(e)), this.style.setProperty("--greyed-out--line-color", e) } const La = { gridSecondary: null === (fi = this._templateResults.gridSecondary) || void 0 === fi ? void 0 : fi.result, solarSecondary: null === (gi = this._templateResults.solarSecondary) || void 0 === gi ? void 0 : gi.result, homeSecondary: null === (bi = this._templateResults.homeSecondary) || void 0 === bi ? void 0 : bi.result, individual1Secondary: null === (wi = this._templateResults.individual1Secondary) || void 0 === wi ? void 0 : wi.result, individual2Secondary: null === (xi = this._templateResults.individual2Secondary) || void 0 === xi ? void 0 : xi.result, nonFossilFuelSecondary: null === (ki = this._templateResults.nonFossilFuelSecondary) || void 0 === ki ? void 0 : ki.result }, Ua = (null === ($i = ba.home) || void 0 === $i ? void 0 : $i.override_state) && ba.home.entity ? (null === (zi = ba.home) || void 0 === zi ? void 0 : zi.subtract_individual) ? this.displayValue(this.getEntityStateWatts(ba.home.entity) - Ta) : this.displayValue(this.getEntityStateWatts(ba.home.entity)) : (null === (Ei = ba.home) || void 0 === Ei ? void 0 : Ei.subtract_individual) ? this.displayValue(Oa - Ta || 0) : this.displayValue(Oa), Wa = xt * ((Oa - (null !== (Si = Aa.state.power) && void 0 !== Si ? Si : 0) - (null !== (Ci = za.state.toHome) && void 0 !== Ci ? Ci : 0) - (null !== (Mi = $a.state.toHome) && void 0 !== Mi ? Mi : 0)) / Oa), Va = { battery: { value: ja, color: "var(--energy-battery-out-color)" }, solar: { value: Na, color: "var(--energy-solar-color)" }, grid: { value: Wa, color: "var(--energy-grid-consumption-color)" }, gridNonFossil: { value: Ga, color: "var(--energy-non-fossil-color)" } }, Za = this._width > 420; $a.has && (za.has ? (this.style.setProperty("--lines-svg-not-flat-line-height", Za ? "106%" : "102%"), this.style.setProperty("--lines-svg-not-flat-line-top", Za ? "-3%" : "-1%"), this.style.setProperty("--lines-svg-flat-width", "calc(100% - 160px)")) : (this.style.setProperty("--lines-svg-not-flat-line-height", Za ? "104%" : "102%"), this.style.setProperty("--lines-svg-not-flat-line-top", Za ? "-2%" : "-1%"), this.style.setProperty("--lines-svg-flat-width", Za ? "calc(100% - 154px)" : "calc(100% - 157px)"), this.style.setProperty("--lines-svg-not-flat-width", Za ? "calc(103% - 172px)" : "calc(103% - 169px)"))); const Ka = Object.keys(Va).reduce(((e, t) => Va[e].value > Va[t].value ? e : t)); let Ya = "var(--primary-text-color)"; "solar" === Ea.color.icon_type ? Ya = "var(--energy-solar-color)" : "battery" === Ea.color.icon_type ? Ya = "var(--energy-battery-out-color)" : "grid" === Ea.color.icon_type ? Ya = "var(--energy-grid-consumption-color)" : !0 === Ea.color.icon_type && (Ya = Va[Ka].color), this.style.setProperty("--icon-home-color", Ya); const Ja = null === (Ai = ba.home) || void 0 === Ai ? void 0 : Ai.color_value; let qa = "var(--primary-text-color)"; "solar" === Ja ? qa = "var(--energy-solar-color)" : "battery" === Ja ? qa = "var(--energy-battery-out-color)" : "grid" === Ja ? qa = "var(--energy-grid-consumption-color)" : !0 === Ja && (qa = Va[Ka].color), this.style.setProperty("--text-home-color", qa); const Qa = ({ className: e, template: t, value: o, entityId: i, icon: a }) => { var r, n; return o || t ? U`<span class="secondary-info ${e}" @click="${e => { this.openDetails(e, i) }}" @keyDown="${e => { "Enter" === e.key && this.openDetails(e, i) }}">${(null === (n = null === (r = ba.solar) || void 0 === r ? void 0 : r.secondary_info) || void 0 === n ? void 0 : n.icon) ? U`<ha-icon class="secondary-info small" .icon="${a}"></ha-icon>` : ""} ${null != t ? t : o}</span>` : "" }, Xa = (e, t) => U`${e.secondary.has || e.secondary.template ? U`${Qa({ className: t, entityId: e.secondary.entity, icon: e.secondary.icon, value: this.displayValue(e.secondary.state, e.secondary.unit, e.secondary.unit_white_space, e.secondary.decimals), template: La[`${t}Secondary`] })}` : ""}`, er = (e, t) => { var o, i; const a = La[`${t}Secondary`], r = e.secondary.has ? this.displayValue(e.secondary.state, e.secondary.unit, e.secondary.unit_white_space, e.secondary.decimals) : void 0, n = !1 !== e.secondary.displayZero || !$e(e.secondary.state) || (null !== (o = Number(e.secondary.state)) && void 0 !== o ? o : 0) > (null !== (i = e.secondary.displayZeroTolerance) && void 0 !== i ? i : 0); return U`${e.secondary.has && n || a ? U`${Qa({ className: t, entityId: e.secondary.entity, icon: e.secondary.icon, value: r, template: La[`${t}Secondary`] })}` : ""}` }; return U`<ha-card .header="${this._config.title}" class="${this._config.full_size ? "full-size" : ""}" style="${this._config.style_ha_card ? this._config.style_ha_card : ""}"><div class="card-content ${this._config.full_size ? "full-size" : ""}" id="power-flow-card-plus" style="${this._config.style_card_content ? this._config.style_card_content : ""}">${$a.has || Ma.has || Ca.has || Aa.hasPercentage ? U`<div class="row">${Aa.hasPercentage ? U`<div class="circle-container low-carbon"><span class="label">${Aa.name}</span><div class="circle" @click="${e => { var t; this.openDetails(e, null === (t = ba.fossil_fuel_percentage) || void 0 === t ? void 0 : t.entity) }}" @keyDown="${e => { var t; "Enter" === e.key && this.openDetails(e, null === (t = ba.fossil_fuel_percentage) || void 0 === t ? void 0 : t.entity) }}">${Xa(Aa, "nonFossilFuel")}<ha-icon .icon="${Aa.icon}" class="low-carbon" style="${Aa.secondary.has ? "padding-top: 2px;" : "padding-top: 0px;"}${!1 !== (null === (Pi = ba.fossil_fuel_percentage) || void 0 === Pi ? void 0 : Pi.display_zero_state) || (Aa.state.power || 0) > ((null === (Di = ba.fossil_fuel_percentage) || void 0 === Di ? void 0 : Di.display_zero_tolerance) || 0) ? "padding-bottom: 2px;" : "padding-bottom: 0px;"}"></ha-icon>${!1 !== (null === (Ti = ba.fossil_fuel_percentage) || void 0 === Ti ? void 0 : Ti.display_zero_state) || (Aa.state.power || 0) > ((null === (Oi = ba.fossil_fuel_percentage) || void 0 === Oi ? void 0 : Oi.display_zero_tolerance) || 0) ? U`<span class="low-carbon">${this.displayNonFossilState(ba.fossil_fuel_percentage.entity, ka.state.fromGrid)}</span>` : ""}</div>${this.showLine(Aa.state.power || 0) ? U`<svg width="80" height="30"><path d="M40 -10 v40" class="low-carbon ${this.styleLine(Aa.state.power || 0)}" id="low-carbon"/>${Aa.has ? W`<circle r="2.4" class="low-carbon" vector-effect="non-scaling-stroke"><animateMotion dur="${this.additionalCircleRate(null === (ji = ba.fossil_fuel_percentage) || void 0 === ji ? void 0 : ji.calculate_flow_rate, Fa.nonFossil)}s" repeatCount="indefinite" calcMode="linear"><mpath xlink:href="#low-carbon"></animateMotion></circle>` : ""}</svg>` : ""}</div>` : U`<div class="spacer"></div>`} ${$a.has ? U`<div class="circle-container solar"><span class="label">${$a.name}</span><div class="circle" @click="${e => { this.openDetails(e, $a.entity) }}" @keyDown="${e => { "Enter" === e.key && this.openDetails(e, $a.entity) }}">${Xa($a, "solar")}<ha-icon id="solar-icon" .icon="${$a.icon}" style="${$a.secondary.has ? "padding-top: 2px;" : "padding-top: 0px;"}${!1 !== (null === (Ni = ba.solar) || void 0 === Ni ? void 0 : Ni.display_zero_state) || ($a.state.total || 0) > 0 ? "padding-bottom: 2px;" : "padding-bottom: 0px;"}"></ha-icon>${!1 !== (null === (Gi = ba.solar) || void 0 === Gi ? void 0 : Gi.display_zero_state) || ($a.state.total || 0) > 0 ? U`<span class="solar">${this.displayValue($a.state.total)}</span>` : ""}</div></div>` : Ma.has || Ca.has ? U`<div class="spacer"></div>` : ""} ${Ma.has ? U`<div class="circle-container individual2"><span class="label">${Ma.name}</span><div class="circle" @click="${e => { var t; this.openDetails(e, null === (t = ba.individual2) || void 0 === t ? void 0 : t.entity) }}" @keyDown="${e => { var t; "Enter" === e.key && this.openDetails(e, null === (t = ba.individual2) || void 0 === t ? void 0 : t.entity) }}">${er(Ma, "individual2")}<ha-icon id="individual2-icon" .icon="${Ma.icon}" style="${Ma.secondary.has ? "padding-top: 2px;" : "padding-top: 0px;"}${!1 !== (null === (Bi = ba.individual2) || void 0 === Bi ? void 0 : Bi.display_zero_state) || (Ma.state || 0) > (null !== (Fi = Ma.displayZeroTolerance) && void 0 !== Fi ? Fi : 0) ? "padding-bottom: 2px;" : "padding-bottom: 0px;"}"></ha-icon>${!1 !== (null === (Ii = ba.individual2) || void 0 === Ii ? void 0 : Ii.display_zero_state) || (Ma.state || 0) > (null !== (Ri = Ma.displayZeroTolerance) && void 0 !== Ri ? Ri : 0) ? U`<span class="individual2">${Ma.showDirection ? U`<ha-icon class="small" .icon="${Ma.invertAnimation ? "mdi:arrow-down" : "mdi:arrow-up"}"></ha-icon>` : ""}${Ha}</span>` : ""}</div>${this.showLine(Ma.state || 0) ? U`<svg width="80" height="30"><path d="M40 -10 v50" id="individual2" class="${this.styleLine(Ma.state || 0)}"/>${Ma.state ? W`<circle r="2.4" class="individual2" vector-effect="non-scaling-stroke"><animateMotion dur="${this.additionalCircleRate(null === (Hi = ba.individual2) || void 0 === Hi ? void 0 : Hi.calculate_flow_rate, Fa.individual2)}s" repeatCount="indefinite" calcMode="linear" keyPoints="${Ma.invertAnimation ? "0;1" : "1;0"}" keyTimes="0;1"><mpath xlink:href="#individual2"></animateMotion></circle>` : ""}</svg>` : ""}</div>` : Ca.has ? U`<div class="circle-container individual1"><span class="label">${Ca.name}</span><div class="circle" @click="${e => { var t; this.openDetails(e, null === (t = ba.individual1) || void 0 === t ? void 0 : t.entity) }}" @keyDown="${e => { var t; "Enter" === e.key && this.openDetails(e, null === (t = ba.individual1) || void 0 === t ? void 0 : t.entity) }}">${er(Ca, "individual1")}<ha-icon id="individual1-icon" .icon="${Ca.icon}" style="${Ca.secondary.has ? "padding-top: 2px;" : "padding-top: 0px;"}${!1 !== (null === (Li = ba.individual1) || void 0 === Li ? void 0 : Li.display_zero_state) || (Ca.state || 0) > (null !== (Ui = Ca.displayZeroTolerance) && void 0 !== Ui ? Ui : 0) ? "padding-bottom: 2px;" : "padding-bottom: 0px;"}"></ha-icon>${!1 !== (null === (Wi = ba.individual1) || void 0 === Wi ? void 0 : Wi.display_zero_state) || (Ca.state || 0) > (null !== (Vi = Ca.displayZeroTolerance) && void 0 !== Vi ? Vi : 0) ? U`<span class="individual1">${Ca.showDirection ? U`<ha-icon class="small" .icon="${Ca.invertAnimation ? "mdi:arrow-down" : "mdi:arrow-up"}"></ha-icon>` : ""}${Ra}</span>` : ""}</div>${this.showLine(Ca.state || 0) ? U`<svg width="80" height="30"><path d="M40 -10 v40" id="individual1" class="${this.styleLine(Ca.state || 0)}"/>${Ca.state ? W`<circle r="2.4" class="individual1" vector-effect="non-scaling-stroke"><animateMotion dur="${this.additionalCircleRate(null === (Zi = ba.individual1) || void 0 === Zi ? void 0 : Zi.calculate_flow_rate, Fa.individual1)}s" repeatCount="indefinite" calcMode="linear" keyPoints="${Ca.invertAnimation ? "0;1" : "1;0"}" keyTimes="0;1"><mpath xlink:href="#individual1"></animateMotion></circle>` : ""}</svg>` : U``}</div>` : U`<div class="spacer"></div>`}</div>` : U``}<div class="row">${ka.has ? U`<div class="circle-container grid"><div class="circle" @click="${e => { var t, o, i, a, r; const n = null !== (o = null === (t = ka.powerOutage) || void 0 === t ? void 0 : t.entityGenerator) && void 0 !== o ? o : null === (a = null === (i = ba.grid) || void 0 === i ? void 0 : i.power_outage) || void 0 === a ? void 0 : a.entity, l = (null === (r = ka.powerOutage) || void 0 === r ? void 0 : r.isOutage) && n ? n : "string" == typeof ba.grid.entity ? ba.grid.entity : ba.grid.entity.production; this.openDetails(e, l) }}" @keyDown="${e => { var t, o, i, a, r; if ("Enter" === e.key) { const n = null !== (o = null === (t = ka.powerOutage) || void 0 === t ? void 0 : t.entityGenerator) && void 0 !== o ? o : null === (a = null === (i = ba.grid) || void 0 === i ? void 0 : i.power_outage) || void 0 === a ? void 0 : a.entity, l = (null === (r = ka.powerOutage) || void 0 === r ? void 0 : r.isOutage) && n ? n : "string" == typeof ba.grid.entity ? ba.grid.entity : ba.grid.entity.production; this.openDetails(e, l) } }}">${Xa(ka, "grid")}<ha-icon .icon="${ka.icon}"></ha-icon>${("two_way" === (null === (Ki = ba.grid) || void 0 === Ki ? void 0 : Ki.display_state) || void 0 === (null === (Yi = ba.grid) || void 0 === Yi ? void 0 : Yi.display_state) || "one_way_no_zero" === (null === (Ji = ba.grid) || void 0 === Ji ? void 0 : Ji.display_state) && (null !== (qi = ka.state.toGrid) && void 0 !== qi ? qi : 0) > 0 || "one_way" === (null === (Qi = ba.grid) || void 0 === Qi ? void 0 : Qi.display_state) && (null === ka.state.fromGrid || 0 === ka.state.fromGrid) && 0 !== ka.state.toGrid) && null !== ka.state.toGrid && !ka.powerOutage.isOutage ? U`<span class="return" @click="${e => { const t = "string" == typeof ba.grid.entity ? ba.grid.entity : ba.grid.entity.production; this.openDetails(e, t) }}" @keyDown="${e => { if ("Enter" === e.key) { const t = "string" == typeof ba.grid.entity ? ba.grid.entity : ba.grid.entity.production; this.openDetails(e, t) } }}"><ha-icon class="small" .icon="${"mdi:arrow-left"}"></ha-icon>${this.displayValue(ka.state.toGrid)}</span>` : null} ${("two_way" === (null === (Xi = ba.grid) || void 0 === Xi ? void 0 : Xi.display_state) || void 0 === (null === (ea = ba.grid) || void 0 === ea ? void 0 : ea.display_state) || "one_way_no_zero" === (null === (ta = ba.grid) || void 0 === ta ? void 0 : ta.display_state) && ka.state.fromGrid > 0 || "one_way" === (null === (oa = ba.grid) || void 0 === oa ? void 0 : oa.display_state) && (null === ka.state.toGrid || 0 === ka.state.toGrid)) && null !== ka.state.fromGrid && !ka.powerOutage.isOutage || ka.powerOutage.isOutage && ka.powerOutage.entityGenerator ? U`<span class="consumption"><ha-icon class="small" .icon="${"mdi:arrow-right"}"></ha-icon>${this.displayValue(ka.state.fromGrid)}</span>` : ""} ${(null === (ia = ka.powerOutage) || void 0 === ia ? void 0 : ia.isOutage) && !(null === (aa = ka.powerOutage) || void 0 === aa ? void 0 : aa.entityGenerator) ? U`<span class="grid power-outage">${ka.powerOutage.name}</span>` : ""}</div><span class="label">${ka.name}</span></div>` : U`<div class="spacer"></div>`}<div class="circle-container home"><div class="circle" id="home-circle" @click="${e => { var t; this.openDetails(e, null === (t = ba.home) || void 0 === t ? void 0 : t.entity) }}" @keyDown="${e => { var t; "Enter" === e.key && this.openDetails(e, null === (t = ba.home) || void 0 === t ? void 0 : t.entity) }}">${Xa(Ea, "home")}<ha-icon .icon="${Ea.icon}"></ha-icon>${Ua} <svg class="home-circle-sections">${void 0 !== Na ? W`<circle class="solar" cx="40" cy="40" r="38" stroke-dasharray="${Na} ${xt - Na}" shape-rendering="geometricPrecision" stroke-dashoffset="-${xt - Na}">` : ""} ${ja ? W`<circle class="battery" cx="40" cy="40" r="38" stroke-dasharray="${ja} ${xt - ja}" stroke-dashoffset="-${xt - ja - (Na || 0)}" shape-rendering="geometricPrecision">` : ""} ${void 0 !== Ga ? W`<circle class="low-carbon" cx="40" cy="40" r="38" stroke-dasharray="${Ga} ${xt - Ga}" stroke-dashoffset="-${xt - Ga - (ja || 0) - (Na || 0)}" shape-rendering="geometricPrecision">` : ""}<circle class="grid" cx="40" cy="40" r="38" stroke-dasharray="${null != Wa ? Wa : xt - Na - (ja || 0)} ${void 0 !== Wa ? xt - Wa : Na + (ja || 0)}" stroke-dashoffset="0" shape-rendering="geometricPrecision"/></svg></div>${this.showLine(Ca.state || 0) && Ma.has && Ca.has ? U`<span class="label"></span>` : U`<span class="label">${Ea.name}</span>`}</div></div>${za.has || Ca.has && Ma.has ? U`<div class="row"><div class="spacer"></div>${za.has ? U`<div class="circle-container battery"><div class="circle" @click="${e => { var t, o, i, a, r; const n = (null === (t = ba.battery) || void 0 === t ? void 0 : t.state_of_charge) ? null === (o = ba.battery) || void 0 === o ? void 0 : o.state_of_charge : "string" == typeof (null === (i = ba.battery) || void 0 === i ? void 0 : i.entity) ? null === (a = ba.battery) || void 0 === a ? void 0 : a.entity : null === (r = ba.battery) || void 0 === r ? void 0 : r.entity.production; this.openDetails(e, n) }}" @keyDown="${e => { var t, o; if ("Enter" === e.key) { const i = (null === (t = ba.battery) || void 0 === t ? void 0 : t.state_of_charge) ? null === (o = ba.battery) || void 0 === o ? void 0 : o.state_of_charge : "string" == typeof ba.battery.entity ? ba.battery.entity : ba.battery.entity.production; this.openDetails(e, i) } }}">${null !== za.state_of_charge.state ? U`<span @click="${e => { var t; this.openDetails(e, null === (t = ba.battery) || void 0 === t ? void 0 : t.state_of_charge) }}" @keyDown="${e => { var t; "Enter" === e.key && this.openDetails(e, null === (t = ba.battery) || void 0 === t ? void 0 : t.state_of_charge) }}" id="battery-state-of-charge-text">${this.displayValue(za.state_of_charge.state, za.state_of_charge.unit, za.state_of_charge.unit_white_space, za.state_of_charge.decimals)}</span>` : null}<ha-icon .icon="${za.icon}" style="${"two_way" === (null === (ra = ba.battery) || void 0 === ra ? void 0 : ra.display_state) ? "padding-top: 0px; padding-bottom: 2px;" : "one_way_no_zero" === (null === (na = ba.battery) || void 0 === na ? void 0 : na.display_state) && 0 === za.state.toBattery && 0 === za.state.fromBattery ? "padding-top: 2px; padding-bottom: 0px;" : "padding-top: 2px; padding-bottom: 2px;"}" @click="${e => { var t; this.openDetails(e, null === (t = ba.battery) || void 0 === t ? void 0 : t.state_of_charge) }}" @keyDown="${e => { var t; "Enter" === e.key && this.openDetails(e, null === (t = ba.battery) || void 0 === t ? void 0 : t.state_of_charge) }}"></ha-icon>${"two_way" === (null === (la = ba.battery) || void 0 === la ? void 0 : la.display_state) || void 0 === (null === (sa = ba.battery) || void 0 === sa ? void 0 : sa.display_state) || "one_way_no_zero" === (null === (da = ba.battery) || void 0 === da ? void 0 : da.display_state) && za.state.toBattery > 0 || "one_way" === (null === (ca = ba.battery) || void 0 === ca ? void 0 : ca.display_state) && 0 !== za.state.toBattery ? U`<span class="battery-in" @click="${e => { const t = "string" == typeof ba.battery.entity ? ba.battery.entity : ba.battery.entity.production; this.openDetails(e, t) }}" @keyDown="${e => { if ("Enter" === e.key) { const t = "string" == typeof ba.battery.entity ? ba.battery.entity : ba.battery.entity.production; this.openDetails(e, t) } }}"><ha-icon class="small" .icon="${"mdi:arrow-down"}"></ha-icon>${this.displayValue(za.state.toBattery)}</span>` : ""} ${"two_way" === (null === (ua = ba.battery) || void 0 === ua ? void 0 : ua.display_state) || void 0 === (null === (_a = ba.battery) || void 0 === _a ? void 0 : _a.display_state) || "one_way_no_zero" === (null === (va = ba.battery) || void 0 === va ? void 0 : va.display_state) && za.state.fromBattery > 0 || "one_way" === (null === (pa = ba.battery) || void 0 === pa ? void 0 : pa.display_state) && (0 === za.state.toBattery || 0 !== za.state.fromBattery) ? U`<span class="battery-out" @click="${e => { const t = "string" == typeof ba.battery.entity ? ba.battery.entity : ba.battery.entity.consumption; this.openDetails(e, t) }}" @keyDown="${e => { if ("Enter" === e.key) { const t = "string" == typeof ba.battery.entity ? ba.battery.entity : ba.battery.entity.consumption; this.openDetails(e, t) } }}"><ha-icon class="small" .icon="${"mdi:arrow-up"}"></ha-icon>${this.displayValue(za.state.fromBattery)}</span>` : ""}</div><span class="label">${za.name}</span></div>` : U`<div class="spacer"></div>`} ${Ma.has && Ca.has ? U`<div class="circle-container individual1 bottom">${this.showLine(Ca.state || 0) ? U`<svg width="80" height="30"><path d="M40 40 v-40" id="individual1" class="${this.styleLine(Ca.state || 0)}"/>${Ca.state ? W`<circle r="2.4" class="individual1" vector-effect="non-scaling-stroke"><animateMotion dur="${this.additionalCircleRate(null === (ha = ba.individual1) || void 0 === ha ? void 0 : ha.calculate_flow_rate, Fa.individual1)}s" repeatCount="indefinite" calcMode="linear" keyPoints="${Ca.invertAnimation ? "0;1" : "1;0"}" keyTimes="0;1"><mpath xlink:href="#individual1"></animateMotion></circle>` : ""}</svg>` : U`<svg width="80" height="30"></svg>`}<div class="circle" @click="${e => { var t; this.openDetails(e, null === (t = ba.individual1) || void 0 === t ? void 0 : t.entity) }}" @keyDown="${e => { var t; "Enter" === e.key && this.openDetails(e, null === (t = ba.individual1) || void 0 === t ? void 0 : t.entity) }}">${er(Ca, "individual1")}<ha-icon id="individual1-icon" .icon="${Ca.icon}" style="${Ca.secondary.has ? "padding-top: 2px;" : "padding-top: 0px;"}${!1 !== (null === (ya = ba.individual1) || void 0 === ya ? void 0 : ya.display_zero_state) || (Ca.state || 0) > (null !== (ma = Ca.displayZeroTolerance) && void 0 !== ma ? ma : 0) ? "padding-bottom: 2px;" : "padding-bottom: 0px;"}"></ha-icon>${!1 !== (null === (fa = ba.individual1) || void 0 === fa ? void 0 : fa.display_zero_state) || (Ca.state || 0) > (null !== (ga = Ca.displayZeroTolerance) && void 0 !== ga ? ga : 0) ? U`<span class="individual1">${Ca.showDirection ? U`<ha-icon class="small" .icon="${Ca.invertAnimation ? "mdi:arrow-up" : "mdi:arrow-down"}"></ha-icon>` : ""}${Ra}</span>` : ""}</div><span class="label">${Ca.name}</span></div>` : U`<div class="spacer"></div>`}</div>` : U`<div class="spacer"></div>`} ${$a.has && this.showLine($a.state.toHome || 0) ? U`<div class="lines ${xe({ high: za.has, "individual1-individual2": !za.has && Ma.has && Ca.has })}"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" id="solar-home-flow"><path id="solar" class="solar ${this.styleLine($a.state.toHome || 0)}" d="M${za.has ? 55 : 53},0 v${ka.has ? 15 : 17} c0,${za.has ? "30 10,30 30,30" : "35 10,35 30,35"} h25" vector-effect="non-scaling-stroke"></path>${$a.state.toHome ? W`<circle r="1" class="solar" vector-effect="non-scaling-stroke"><animateMotion dur="${Fa.solarToHome}s" repeatCount="indefinite" calcMode="linear"><mpath xlink:href="#solar"></animateMotion></circle>` : ""}</svg></div>` : ""} ${ka.hasReturnToGrid && $a.has && this.showLine($a.state.toGrid || 0) ? U`<div class="lines ${xe({ high: za.has, "individual1-individual2": !za.has && Ma.has && Ca.has })}"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" id="solar-grid-flow"><path id="return" class="return ${this.styleLine($a.state.toGrid || 0)}" d="M${za.has ? 45 : 47},0 v15 c0,${za.has ? "30 -10,30 -30,30" : "35 -10,35 -30,35"} h-20" vector-effect="non-scaling-stroke"></path>${$a.state.toGrid && $a.has ? W`<circle r="1" class="return" vector-effect="non-scaling-stroke"><animateMotion dur="${Fa.solarToGrid}s" repeatCount="indefinite" calcMode="linear"><mpath xlink:href="#return"></animateMotion></circle>` : ""}</svg></div>` : ""} ${za.has && $a.has && this.showLine($a.state.toBattery || 0) ? U`<div class="lines ${xe({ high: za.has, "individual1-individual2": !za.has && Ma.has && Ca.has })}"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" id="solar-battery-flow" class="flat-line"><path id="battery-solar" class="battery-solar ${this.styleLine($a.state.toBattery || 0)}" d="M50,0 V100" vector-effect="non-scaling-stroke"></path>${$a.state.toBattery ? W`<circle r="1" class="battery-solar" vector-effect="non-scaling-stroke"><animateMotion dur="${Fa.solarToBattery}s" repeatCount="indefinite" calcMode="linear"><mpath xlink:href="#battery-solar"></animateMotion></circle>` : ""}</svg></div>` : ""} ${ka.has && this.showLine(ka.state.fromGrid) ? U`<div class="lines ${xe({ high: za.has, "individual1-individual2": !za.has && Ma.has && Ca.has })}"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" id="grid-home-flow" class="flat-line"><path class="grid ${this.styleLine(ka.state.toHome || 0)}" id="grid" d="M0,${za.has ? 50 : $a.has ? 56 : 53} H100" vector-effect="non-scaling-stroke"></path>${ka.state.toHome ? W`<circle r="1" class="grid" vector-effect="non-scaling-stroke"><animateMotion dur="${Fa.gridToHome}s" repeatCount="indefinite" calcMode="linear"><mpath xlink:href="#grid"></animateMotion></circle>` : ""}</svg></div>` : null} ${za.has && this.showLine(za.state.toHome) ? U`<div class="lines ${xe({ high: za.has, "individual1-individual2": !za.has && Ma.has && Ca.has })}"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" id="battery-home-flow"><path id="battery-home" class="battery-home ${this.styleLine(za.state.toHome || 0)}" d="M55,100 v-${ka.has ? 15 : 17} c0,-30 10,-30 30,-30 h20" vector-effect="non-scaling-stroke"></path>${za.state.toHome ? W`<circle r="1" class="battery-home" vector-effect="non-scaling-stroke"><animateMotion dur="${Fa.batteryToHome}s" repeatCount="indefinite" calcMode="linear"><mpath xlink:href="#battery-home"></animateMotion></circle>` : ""}</svg></div>` : ""} ${ka.has && za.has && this.showLine(Math.max(ka.state.toBattery || 0, za.state.toGrid || 0)) ? U`<div class="lines ${xe({ high: za.has, "individual1-individual2": !za.has && Ma.has && Ca.has })}"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid slice" id="battery-grid-flow"><path id="battery-grid" class="${this.styleLine(za.state.toGrid || ka.state.toBattery || 0)}" d="M45,100 v-15 c0,-30 -10,-30 -30,-30 h-20" vector-effect="non-scaling-stroke"></path>${ka.state.toBattery ? W`<circle r="1" class="battery-from-grid" vector-effect="non-scaling-stroke"><animateMotion dur="${Fa.batteryGrid}s" repeatCount="indefinite" keyPoints="1;0" keyTimes="0;1" calcMode="linear"><mpath xlink:href="#battery-grid"></animateMotion></circle>` : ""} ${za.state.toGrid ? W`<circle r="1" class="battery-to-grid" vector-effect="non-scaling-stroke"><animateMotion dur="${Fa.batteryGrid}s" repeatCount="indefinite" calcMode="linear"><mpath xlink:href="#battery-grid"></animateMotion></circle>` : ""}</svg></div>` : ""}</div>${this._config.dashboard_link || this._config.second_dashboard_link ? U`<div class="card-actions">${this._config.dashboard_link ? U`<a href="${this._config.dashboard_link}"><mwc-button>${this._config.dashboard_link_label || this.hass.localize("ui.panel.lovelace.cards.energy.energy_distribution.go_to_energy_dashboard")}</mwc-button></a>` : ""} ${this._config.second_dashboard_link ? U`<a href="${this._config.second_dashboard_link}"><mwc-button>${this._config.second_dashboard_link_label || this.hass.localize("ui.panel.lovelace.cards.energy.energy_distribution.go_to_energy_dashboard")}</mwc-button></a>` : ""}</div>` : ""}</ha-card>` } updated(e) { var t; if (super.updated(e), !this._config || !this.hass) return; const o = null === (t = null == this ? void 0 : this.shadowRoot) || void 0 === t ? void 0 : t.querySelector("#power-flow-card-plus"), i = o ? getComputedStyle(o).getPropertyValue("width") : "0px"; this._width = parseInt(i.replace("px", ""), 10), this._tryConnectAll() } _tryConnectAll() { var e, t, o, i, a, r, n, l, s, d, c, u; const { entities: _ } = this._config, v = { gridSecondary: null === (t = null === (e = _.grid) || void 0 === e ? void 0 : e.secondary_info) || void 0 === t ? void 0 : t.template, solarSecondary: null === (i = null === (o = _.solar) || void 0 === o ? void 0 : o.secondary_info) || void 0 === i ? void 0 : i.template, homeSecondary: null === (r = null === (a = _.home) || void 0 === a ? void 0 : a.secondary_info) || void 0 === r ? void 0 : r.template, individual1Secondary: null === (l = null === (n = _.individual1) || void 0 === n ? void 0 : n.secondary_info) || void 0 === l ? void 0 : l.template, individual2Secondary: null === (d = null === (s = _.individual2) || void 0 === s ? void 0 : s.secondary_info) || void 0 === d ? void 0 : d.template, nonFossilFuelSecondary: null === (u = null === (c = _.fossil_fuel_percentage) || void 0 === c ? void 0 : c.secondary_info) || void 0 === u ? void 0 : u.template }; for (const [e, t] of Object.entries(v)) t && this._tryConnect(t, e) } async _tryConnect(e, t) { var o, i, a, r, n, l; if (this.hass && this._config && void 0 === (null === (o = this._unsubRenderTemplates) || void 0 === o ? void 0 : o.get(t)) && "" !== e) try { const o = (r = this.hass.connection, n = e => { this._templateResults[t] = e }, l = { template: e, entity_ids: this._config.entity_id, variables: { config: this._config, user: this.hass.user.name }, strict: !0 }, r.subscribeMessage((e => n(e)), Object.assign({ type: "render_template" }, l))); null === (i = this._unsubRenderTemplates) || void 0 === i || i.set(t, o), await o } catch (o) { this._templateResults = Object.assign(Object.assign({}, this._templateResults), { [t]: { result: e, listeners: { all: !1, domains: [], entities: [], time: !1 } } }), null === (a = this._unsubRenderTemplates) || void 0 === a || a.delete(t) } } async _tryDisconnectAll() { var e, t, o, i, a, r, n, l, s, d; const { entities: c } = this._config, u = { gridSecondary: null === (t = null === (e = c.grid) || void 0 === e ? void 0 : e.secondary_info) || void 0 === t ? void 0 : t.template, solarSecondary: null === (i = null === (o = c.solar) || void 0 === o ? void 0 : o.secondary_info) || void 0 === i ? void 0 : i.template, homeSecondary: null === (r = null === (a = c.home) || void 0 === a ? void 0 : a.secondary_info) || void 0 === r ? void 0 : r.template, individual1Secondary: null === (l = null === (n = c.individual1) || void 0 === n ? void 0 : n.secondary_info) || void 0 === l ? void 0 : l.template, individual2Secondary: null === (d = null === (s = c.individual2) || void 0 === s ? void 0 : s.secondary_info) || void 0 === d ? void 0 : d.template }; for (const [e, t] of Object.entries(u)) t && this._tryDisconnect(e) } async _tryDisconnect(e) { var t, o; const i = null === (t = this._unsubRenderTemplates) || void 0 === t ? void 0 : t.get(e); if (i) try { (await i)(), null === (o = this._unsubRenderTemplates) || void 0 === o || o.delete(e) } catch (e) { if ("not_found" !== e.code && "template_error" !== e.code) throw e } } }; kt.styles = Ce, e([ye({ attribute: !1 })], kt.prototype, "hass", void 0), e([me()], kt.prototype, "_config", void 0), e([me()], kt.prototype, "_templateResults", void 0), e([me()], kt.prototype, "_unsubRenderTemplate", void 0), e([me()], kt.prototype, "_unsubRenderTemplates", void 0), e([me()], kt.prototype, "_width", void 0), e([fe("#battery-grid-flow")], kt.prototype, "batteryGridFlow", void 0), e([fe("#battery-home-flow")], kt.prototype, "batteryToHomeFlow", void 0), e([fe("#grid-home-flow")], kt.prototype, "gridToHomeFlow", void 0), e([fe("#solar-battery-flow")], kt.prototype, "solarToBatteryFlow", void 0), e([fe("#solar-grid-flow")], kt.prototype, "solarToGridFlow", void 0), e([fe("#solar-home-flow")], kt.prototype, "solarToHomeFlow", void 0), kt = e([ve("power-flow-card-plus")], kt); class $t extends TypeError { constructor(e, t) { let o; const { message: i, explanation: a, ...r } = e, { path: n } = e, l = 0 === n.length ? i : `At path: ${n.join(".")} -- ${i}`; super(a ?? l), null != a && (this.cause = l), Object.assign(this, r), this.name = this.constructor.name, this.failures = () => o ?? (o = [e, ...t()]) } } function zt(e) { return "object" == typeof e && null != e } function Et(e) { return "symbol" == typeof e ? e.toString() : "string" == typeof e ? JSON.stringify(e) : `${e}` } function St(e, t, o, i) { if (!0 === e) return; !1 === e ? e = {} : "string" == typeof e && (e = { message: e }); const { path: a, branch: r } = t, { type: n } = o, { refinement: l, message: s = `Expected a value of type \`${n}\`${l ? ` with refinement \`${l}\`` : ""}, but received: \`${Et(i)}\`` } = e; return { value: i, type: n, refinement: l, key: a[a.length - 1], path: a, branch: r, ...e, message: s } } function* Ct(e, t, o, i) { (function (e) { return zt(e) && "function" == typeof e[Symbol.iterator] })(e) || (e = [e]); for (const a of e) { const e = St(a, t, o, i); e && (yield e) } } function* Mt(e, t, o = {}) { const { path: i = [], branch: a = [e], coerce: r = !1, mask: n = !1 } = o, l = { path: i, branch: a }; if (r && (e = t.coercer(e, l), n && "type" !== t.type && zt(t.schema) && zt(e) && !Array.isArray(e))) for (const o in e) void 0 === t.schema[o] && delete e[o]; let s = "valid"; for (const i of t.validator(e, l)) i.explanation = o.message, s = "not_valid", yield [i, void 0]; for (let [d, c, u] of t.entries(e, l)) { const t = Mt(c, u, { path: void 0 === d ? i : [...i, d], branch: void 0 === d ? a : [...a, c], coerce: r, mask: n, message: o.message }); for (const o of t) o[0] ? (s = null != o[0].refinement ? "not_refined" : "not_valid", yield [o[0], void 0]) : r && (c = o[1], void 0 === d ? e = c : e instanceof Map ? e.set(d, c) : e instanceof Set ? e.add(c) : zt(e) && (void 0 !== c || d in e) && (e[d] = c)) } if ("not_valid" !== s) for (const i of t.refiner(e, l)) i.explanation = o.message, s = "not_refined", yield [i, void 0]; "valid" === s && (yield [void 0, e]) } class At { constructor(e) { const { type: t, schema: o, validator: i, refiner: a, coercer: r = (e => e), entries: n = function* () { } } = e; this.type = t, this.schema = o, this.entries = n, this.coercer = r, this.validator = i ? (e, t) => Ct(i(e, t), t, this, e) : () => [], this.refiner = a ? (e, t) => Ct(a(e, t), t, this, e) : () => [] } assert(e, t) { return Pt(e, this, t) } create(e, t) { return function (e, t, o) { const i = Dt(e, t, { coerce: !0, message: o }); if (i[0]) throw i[0]; return i[1] }(e, this, t) } is(e) { return function (e, t) { const o = Dt(e, t); return !o[0] }(e, this) } mask(e, t) { return function (e, t, o) { const i = Dt(e, t, { coerce: !0, mask: !0, message: o }); if (i[0]) throw i[0]; return i[1] }(e, this, t) } validate(e, t = {}) { return Dt(e, this, t) } } function Pt(e, t, o) { const i = Dt(e, t, { message: o }); if (i[0]) throw i[0] } function Dt(e, t, o = {}) { const i = Mt(e, t, o), a = function (e) { const { done: t, value: o } = e.next(); return t ? void 0 : o }(i); if (a[0]) { const e = new $t(a[0], (function* () { for (const e of i) e[0] && (yield e[0]) })); return [e, void 0] } return [void 0, a[1]] } function Tt(e, t) { return new At({ type: e, schema: null, validator: t }) } function Ot() { return Tt("any", (() => !0)) } function jt() { return Tt("boolean", (e => "boolean" == typeof e)) } function Nt() { return Tt("integer", (e => "number" == typeof e && !isNaN(e) && Number.isInteger(e) || `Expected an integer, but received: ${Et(e)}`)) } function Gt() { return Tt("number", (e => "number" == typeof e && !isNaN(e) || `Expected a number, but received: ${Et(e)}`)) } function Bt(e) { const t = e ? Object.keys(e) : [], o = Tt("never", (() => !1)); return new At({ type: "object", schema: e || null, *entries(i) { if (e && zt(i)) { const a = new Set(Object.keys(i)); for (const o of t) a.delete(o), yield [o, i[o], e[o]]; for (const e of a) yield [e, i[e], o] } }, validator: e => zt(e) || `Expected an object, but received: ${Et(e)}`, coercer: e => zt(e) ? { ...e } : e }) } function Ft(e) { return new At({ ...e, validator: (t, o) => void 0 === t || e.validator(t, o), refiner: (t, o) => void 0 === t || e.refiner(t, o) }) } function It() { return Tt("string", (e => "string" == typeof e || `Expected a string, but received: ${Et(e)}`)) } var Rt = Number.isNaN || function (e) { return "number" == typeof e && e != e }; function Ht(e, t) { if (e.length !== t.length) return !1; for (var o = 0; o < e.length; o++)if (i = e[o], a = t[o], !(i === a || Rt(i) && Rt(a))) return !1; var i, a; return !0 } function Lt(e, t) { void 0 === t && (t = Ht); var o = null; function i() { for (var i = [], a = 0; a < arguments.length; a++)i[a] = arguments[a]; if (o && o.lastThis === this && t(i, o.lastArgs)) return o.lastResult; var r = e.apply(this, i); return o = { lastResult: r, lastArgs: i, lastThis: this }, r } return i.clear = function () { o = null }, i } function Ut() { return { type: "expandable", title: wt("editor.combined"), schema: [{ name: "entity", selector: { entity: {} } }] } } function Wt() { return { type: "expandable", title: wt("editor.separated"), name: "entity", schema: [{ name: "consumption", label: "Consumption Entity", selector: { entity: {} } }, { name: "production", label: "Production Entity", selector: { entity: {} } }] } } const Vt = { name: "color", title: wt("editor.custom_colors"), type: "expandable", schema: [{ type: "grid", column_min_width: "200px", schema: [{ name: "consumption", label: "Consumption", selector: { color_rgb: {} } }, { name: "production", label: "Production", selector: { color_rgb: {} } }] }] }, Zt = [{ name: "entity", selector: { entity: {} } }, { name: "template", label: "Template (overrides entity, save to update)", selector: { template: {} } }, { type: "grid", column_min_width: "200px", schema: [{ name: "icon", selector: { icon: {} } }, { name: "unit_of_measurement", label: "Unit of Measurement", selector: { text: {} } }, { name: "decimals", label: "Decimals", selector: { number: { mode: "box", min: 0, max: 10, step: 1 } } }, { name: "color_value", label: "Color Value", selector: { boolean: {} } }, { name: "unit_white_space", label: "Unit White Space", selector: { boolean: {} } }, { name: "display_zero", label: "Display Zero", selector: { boolean: {} } }, { name: "display_zero_tolerance", label: "Display Zero Tolerance", selector: { number: { mode: "box", min: 0, max: 1e6, step: .1 } } }] }], Kt = [{ name: "color_icon", label: "Color of Icon", selector: { select: { options: [{ value: !1, label: "Do not Color" }, { value: !0, label: "Color dynamically" }, { value: "production", label: "Production" }, { value: "consumption", label: "Consumption" }], custom_value: !0 } } }, { name: "color_circle", label: "Color of Circle", selector: { select: { options: [{ value: !0, label: "Color dynamically" }, { value: !1, label: "Consumption" }, { value: "production", label: "Production" }], custom_value: !0 } } }, { name: "display_zero_tolerance", label: "Display Zero Tolerance", selector: { number: { min: 0, max: 1e6, step: 1, mode: "box" } } }, { name: "display_state", label: "Display State", selector: { select: { options: [{ value: "two_way", label: "Two Way" }, { value: "one_way_no_zero", label: "One Way" }, { value: "one_way", label: "One Way (Show Zero)" }], custom_value: !0 } } }]; function Yt(e) { const t = { type: "grid", column_min_width: "200px", schema: [{ name: "name", selector: { text: {} } }, { name: "icon", selector: { icon: {} } }] }; return "battery" !== e && "grid" !== e || t.schema.push(...Kt), t } const Jt = Object.assign(Object.assign({}, Yt("grid")), { schema: [...Yt("grid").schema, { name: "invert_state", label: "Invert State", selector: { boolean: {} } }, { name: "use_metadata", label: "Use Metadata", selector: { boolean: {} } }, { name: "color_value", label: "Color of Value", selector: { boolean: {} } }] }), qt = [Ut(), Wt(), Jt, Vt, { title: wt("editor.secondary_info"), name: "secondary_info", type: "expandable", schema: Zt }, { title: wt("editor.power_outage"), name: "power_outage", type: "expandable", schema: [{ type: "grid", column_min_width: "200px", schema: [{ name: "entity", selector: { entity: {} } }, { name: "entity_generator", label: "Generator Entity", selector: { entity: {} } }, { name: "label_alert", label: "Outage Label", selector: { text: {} } }, { name: "icon_alert", label: "Outage Icon", selector: { icon: {} } }, { name: "state_alert", label: "Outage State", selector: { text: {} } }] }] }], Qt = Object.assign(Object.assign({}, Yt("battery")), { schema: [...Yt("battery").schema, { name: "invert_state", label: "Invert State", selector: { boolean: {} } }, { name: "color_value", label: "Color of Value", selector: { boolean: {} } }, { name: "use_metadata", label: "Use Metadata", selector: { boolean: {} } }] }), Xt = [Ut(), Wt(), { title: wt("editor.state_of_charge"), name: "", type: "expandable", schema: [{ name: "state_of_charge", label: "State of Charge Entity", selector: { entity: {} } }, { name: "", type: "grid", column_min_width: "200px", schema: [{ name: "state_of_charge_unit", label: "Unit", selector: { text: {} } }, { name: "state_of_charge_unit_white_space", label: "Unit White Space", selector: { boolean: {} } }, { name: "state_of_charge_decimals", label: "Decimals", selector: { number: { mode: "box", min: 0, max: 4, step: 1 } } }, { name: "color_state_of_charge_value", label: "Color of Value", selector: { select: { options: [{ value: !1, label: "Do Not Color" }, { value: !0, label: "Color dynamically" }, { value: "consumption", label: "Consumption" }, { value: "production", label: "Production" }], custom_value: !0 } } }] }] }, Qt, Vt], eo = [{ name: "entity", selector: { entity: {} } }, Object.assign(Object.assign({}, Yt()), { schema: [...Yt().schema, { name: "color_value", label: "Color Value", selector: { boolean: {} } }, { name: "color_icon", label: "Color Icon", selector: { boolean: {} } }, { name: "display_zero_state", label: "Display State When Zero?", selector: { boolean: {} } }, { name: "display_zero_tolerance", label: "Display Zero Tolerance", selector: { number: { mode: "box", min: 0, max: 1e6, step: .1 } } }, { name: "invert_state", label: "Invert State", selector: { boolean: {} } }, { name: "use_metadata", label: "Use Metadata", selector: { boolean: {} } }] }), { name: "color", label: "Color", selector: { color_rgb: {} } }, { title: wt("editor.secondary_info"), name: "secondary_info", type: "expandable", schema: Zt }], to = [{ name: "entity", selector: { entity: {} } }, Object.assign(Object.assign({}, Yt()), { schema: [...Yt().schema, { name: "color_value", label: "Color Value", selector: { boolean: {} } }, { name: "color_icon", label: "Color Icon", selector: { boolean: {} } }, { name: "display_zero", label: "Display Zero", selector: { boolean: {} } }, { name: "display_zero_tolerance", label: "Display Zero Tolerance", selector: { number: { mode: "box", min: 0, max: 1e6, step: .1 } } }, { name: "display_zero_state", label: "Display Zero State", selector: { boolean: {} } }, { name: "unit_of_measurement", label: "Unit of Measurement", selector: { text: {} } }, { name: "calculate_flow_rate", label: "Calculate Flow Rate", selector: { boolean: {} } }, { name: "decimals", label: "Decimals", selector: { number: { mode: "box", min: 0, max: 4, step: 1 } } }, { name: "inverted_animation", label: "Invert Animation", selector: { boolean: {} } }, { name: "show_direction", label: "Show Direction", selector: { boolean: {} } }, { name: "use_metadata", label: "Use Metadata", selector: { boolean: {} } }] }), { name: "color", label: "Color", selector: { color_rgb: {} } }, { title: wt("editor.secondary_info"), name: "secondary_info", type: "expandable", schema: Zt }], oo = [{ name: "entity", selector: { entity: {} } }, Object.assign(Object.assign({}, Yt()), { schema: [...Yt().schema, { name: "state_type", label: "State Type", selector: { select: { options: [{ value: "power", label: "Power" }, { value: "percentage", label: "Percentage" }], custom_value: !0 } } }, { name: "color_value", label: "Color Value", selector: { boolean: {} } }, { name: "color_icon", label: "Color Icon", selector: { boolean: {} } }, { name: "display_zero", label: "Display Zero", selector: { boolean: {} } }, { name: "display_zero_tolerance", label: "Display Zero Tolerance", selector: { number: { mode: "box", min: 0, max: 1e6, step: .1 } } }, { name: "display_zero_state", label: "Display Zero State", selector: { boolean: {} } }, { name: "unit_white_space", label: "Unit White Space", selector: { boolean: {} } }, { name: "use_metadata", label: "Use Metadata", selector: { boolean: {} } }] }), { name: "color", label: "Color", selector: { color_rgb: {} } }, { title: wt("editor.secondary_info"), name: "secondary_info", type: "expandable", schema: Zt }], io = [{ name: "entity", selector: { entity: {} } }, Object.assign(Object.assign({}, Yt()), { schema: [...Yt().schema, { name: "color_value", label: "Color Value", selector: { select: { options: [{ value: !0, label: "Color dynamically" }, { value: !1, label: "Do Not Color" }, { value: "solar", label: "Solar" }, { value: "grid", label: "Grid" }, { value: "battery", label: "Battery" }], custom_value: !0 } } }, { name: "color_icon", label: "Color Icon", selector: { select: { options: [{ value: !0, label: "Color dynamically" }, { value: !1, label: "Do Not Color" }, { value: "solar", label: "Solar" }, { value: "grid", label: "Grid" }, { value: "battery", label: "Battery" }], custom_value: !0 } } }, { name: "subtract_individual", label: "Subtract Individual", selector: { boolean: {} } }, { name: "override_state", label: "Override State (With Home Entity)", selector: { boolean: {} } }, { name: "use_metadata", label: "Use Metadata", selector: { boolean: {} } }] }), { title: wt("editor.secondary_info"), name: "secondary_info", type: "expandable", schema: Zt }], ao = { name: "grey_color", selector: { color_rgb: {} } }, ro = { name: "transparency", selector: { number: { min: 0, max: 100, step: 1, mode: "box" } } }, no = { name: "", type: "grid", column_min_width: "200px", schema: [ro, ao] }, lo = e => { switch (e) { case "grey_out": return ao; case "transparency": return ro; case "custom": return no; default: return [] } }, so = Lt(((e, t) => [{ name: "display_zero_lines", type: "grid", column_min_width: "400px", schema: [{ name: "mode", selector: { select: { mode: "dropdown", options: [{ value: "show", label: e("editor.show") }, { value: "hide", label: e("editor.hide") }, { value: "transparency", label: e("editor.transparency") }, { value: "grey_out", label: e("editor.grey_out") }, { value: "custom", label: e("editor.custom") }] } } }, lo(t)] }])), co = function (...e) { const t = "type" === e[0].type, o = e.map((e => e.schema)), i = Object.assign({}, ...o); return t ? function (e) { const t = Object.keys(e); return new At({ type: "type", schema: e, *entries(o) { if (zt(o)) for (const i of t) yield [i, o[i], e[i]] }, validator: e => zt(e) || `Expected an object, but received: ${Et(e)}`, coercer: e => zt(e) ? { ...e } : e }) }(i) : Bt(i) }(Bt({ type: It(), view_layout: Ot() }), Bt({ title: Ft(It()), theme: Ft(It()), dashboard_link: Ft(It()), dashboard_link_label: Ft(It()), second_dashboard_link: Ft(It()), second_dashboard_link_label: Ft(It()), inverted_entities: Ft(Ot()), w_decimals: Ft(Nt()), kw_decimals: Ft(Nt()), min_flow_rate: Ft(Gt()), max_flow_rate: Ft(Gt()), min_expected_power: Ft(Gt()), max_expected_power: Ft(Gt()), watt_threshold: Ft(Gt()), clickable_entities: Ft(jt()), transparency_zero_lines: Ft(Gt()), greyout_zero_lines: Ft(jt()), display_zero_lines: Ft(Ot()), use_new_flow_rate_model: Ft(jt()), full_size: Ft(jt()), style_ha_card: Ft(Ot()), style_card_content: Ft(Ot()), entities: Bt({ battery: Ft(Ot()), grid: Ft(Ot()), solar: Ft(Ot()), home: Ft(Ot()), fossil_fuel_percentage: Ft(Ot()), individual1: Ft(Ot()), individual2: Ft(Ot()) }) })), uo = [{ name: "title", label: "Title", selector: { text: {} } }], _o = Lt((e => [{ name: "entities", type: "grid", column_min_width: "400px", schema: [{ title: e("editor.grid"), name: "grid", type: "expandable", schema: qt }, { title: e("editor.solar"), name: "solar", type: "expandable", schema: eo }, { title: e("editor.battery"), name: "battery", type: "expandable", schema: Xt }, { title: e("editor.fossil_fuel_percentage"), name: "fossil_fuel_percentage", type: "expandable", schema: oo }, { title: e("editor.home"), name: "home", type: "expandable", schema: io }, { title: `${e("editor.individual")} 1`, name: "individual1", type: "expandable", schema: to }, { title: `${e("editor.individual")} 2`, name: "individual2", type: "expandable", schema: to }] }])), vo = Lt(((e, t) => [{ title: e("editor.advanced"), type: "expandable", schema: [{ type: "grid", column_min_width: "200px", schema: [{ name: "dashboard_link", label: "Dashboard Link", selector: { navigation: {} } }, { name: "dashboard_link_label", label: "Dashboard Link Label", selector: { text: {} } }, { name: "w_decimals", label: "Watt Decimals", selector: { number: { mode: "box", min: 0, max: 5, step: 1 } } }, { name: "kw_decimals", label: "kW Decimals", selector: { number: { mode: "box", min: 0, max: 5, step: 1 } } }, { name: "max_flow_rate", label: "Max Flow Rate (Sec/Dot)", selector: { number: { mode: "box", min: 0, max: 1e6, step: .01 } } }, { name: "min_flow_rate", label: "Min Flow Rate (Sec/Dot)", selector: { number: { mode: "box", min: 0, max: 1e6, step: .01 } } }, { name: "max_expected_power", label: "Max Expected Power (in Watts)", selector: { number: { mode: "box", min: 0, max: 1e6, step: .01 } } }, { name: "min_expected_power", label: "Min Expected Power (in Watts)", selector: { number: { mode: "box", min: 0, max: 1e6, step: .01 } } }, { name: "watt_threshold", label: "Watt to Kilowatt Threshold", selector: { number: { mode: "box", min: 0, max: 1e6, step: 1 } } }, { name: "clickable_entities", label: "Clickable Entities", selector: { boolean: {} } }, { name: "use_new_flow_rate_model", label: "New Flow Model?", selector: { boolean: {} } }] }, { type: "expandable", title: e("editor.display_zero_lines"), schema: [...so(e, t)] }] }])), po = async () => { var e, t; if (customElements.get("ha-form")) return; const o = await (null === (t = (e = window).loadCardHelpers) || void 0 === t ? void 0 : t.call(e)); if (!o) return; const i = await o.createCardElement({ type: "entity" }); i && await i.getConfigElement() }; let ho = class extends ue { constructor() { super(...arguments), this.showOther = !1, this._computeLabelCallback = e => this.hass.localize(`ui.panel.lovelace.editor.card.generic.${null == e ? void 0 : e.name}`) || wt(`editor.${null == e ? void 0 : e.name}`) } async setConfig(e) { Pt(e, co), this._config = e } connectedCallback() { super.connectedCallback(), po() } render() { var e, t, o, i, a, r, n; if (!this.hass || !this._config) return Z; const l = Object.assign(Object.assign({}, this._config), { display_zero_lines: { mode: null !== (t = null === (e = this._config.display_zero_lines) || void 0 === e ? void 0 : e.mode) && void 0 !== t ? t : Me.displayZeroLines.mode, transparency: null !== (i = null === (o = this._config.display_zero_lines) || void 0 === o ? void 0 : o.transparency) && void 0 !== i ? i : Me.displayZeroLines.transparency, grey_color: null !== (r = null === (a = this._config.display_zero_lines) || void 0 === a ? void 0 : a.grey_color) && void 0 !== r ? r : Me.displayZeroLines.grey_color } }); return U`<div class="card-config"><ha-form .hass="${this.hass}" .data="${l}" .schema="${uo}" .computeLabel="${this._computeLabelCallback}" @value-changed="${this._valueChanged}"></ha-form><div style="height:24px"></div><ha-form .hass="${this.hass}" .data="${l}" .schema="${_o(wt)}" .computeLabel="${this._computeLabelCallback}" @value-changed="${this._valueChanged}" class="entities-section"></ha-form><div style="height:24px"></div><ha-form .hass="${this.hass}" .data="${l}" .schema="${vo(wt, null === (n = l.display_zero_lines) || void 0 === n ? void 0 : n.mode)}" .computeLabel="${this._computeLabelCallback}" @value-changed="${this._valueChanged}"></ha-form></div>` } _valueChanged(e) { const t = e.detail.value || ""; this._config && this.hass && function (e, t, o, i) { i = i || {}, o = null == o ? {} : o; var a = new Event(t, { bubbles: void 0 === i.bubbles || i.bubbles, cancelable: Boolean(i.cancelable), composed: void 0 === i.composed || i.composed }); a.detail = o, e.dispatchEvent(a) }(this, "config-changed", { config: t }) } static get styles() { return u`ha-form{width:100%}ha-icon-button{align-self:center}.entities-section *{background-color:red}.card-config{display:flex;flex-direction:column;justify-content:space-between;align-items:center;margin-bottom:10px}.config-header{display:flex;flex-direction:row;justify-content:space-between;align-items:center;width:100%}.config-header.sub-header{margin-top:24px}ha-icon{padding-bottom:2px;position:relative;top:-4px;right:1px}` } }; e([ye({ attribute: !1 })], ho.prototype, "hass", void 0), e([me()], ho.prototype, "_config", void 0), e([me()], ho.prototype, "showOther", void 0), ho = e([ve("power-flow-card-plus-editor")], ho); var yo = Object.freeze({ __proto__: null, loadHaForm: po, get PowerFlowCardPlusEditor() { return ho } }); export { kt as PowerFlowCardPlus };
