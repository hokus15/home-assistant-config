dialogflow:

recorder:
  exclude:
    entities:
      - sensor.recibidor_termometro_temperatura
      - sensor.exterior_termometro_temperatura
      - sensor.exterior_termometro_humedad
      - sensor.exterior_termometro_max_temp
      - sensor.exterior_termometro_min_temp
      - sensor.salon_termometro_co2
      - sensor.salon_termometro_temperatura
      - sensor.salon_termometro_humedad
      - sensor.salon_termometro_max_temp
      - sensor.salon_termometro_min_temp
      - sensor.salon_termometro_ruido
      - sensor.salon_termometro_presion
      - sensor.suite_termometro_co2
      - sensor.suite_termometro_temperatura
      - sensor.suite_termometro_humedad
      - sensor.suite_termometro_max_temp
      - sensor.suite_termometro_min_temp
      - sensor.habitacion_termometro_co2
      - sensor.habitacion_termometro_temperatura
      - sensor.habitacion_termometro_humedad
      - sensor.habitacion_termometro_max_temp
      - sensor.habitacion_termometro_min_temp
      - sensor.exterior_pluviometro_lluvia
      - sensor.exterior_pluviometro_lluvia_1
      - sensor.exterior_pluviometro_lluvia_24
      - sensor.exterior_anemometro_velocidad_viento
      - sensor.on_off_switch_termostato
      - sensor.on_off_switch_thermostat_away_mode
      - sensor.on_off_switch_piscina
      - sensor.on_off_group_luces_exteriores
      - sensor.on_off_group_luces_interiores
      - sensor.on_off_switch_entrance_hall_lamp_switch
      - sensor.on_off_switch_escalera_switch
      - sensor.on_off_switch_suite_switch
      - sensor.on_off_switch_caseta_camara_det_mov
      - sensor.on_off_switch_piscina_camara_det_mov
      - sensor.on_off_switch_recibidor_camara_det_mov
      - sensor.on_off_input_boolean_despacho_sensor_movimiento
      - sensor.on_off_input_boolean_cocina_sensor_puerta
      - sensor.on_off_input_boolean_cocina_sensor_persiana
      - sensor.on_off_switch_holiday
      - sensor.on_off_switch_ups_beeper
      - sensor.on_off_group_seguridad
      - sensor.on_off_outside_fence_switch
      - sensor.check_switch_termostato
      - sensor.check_switch_thermostat_away_mode
      - sensor.check_switch_piscina
      - sensor.check_group_luces_exteriores
      - sensor.check_group_luces_interiores
      - sensor.check_switch_entrance_hall_lamp_switch
      - sensor.check_switch_escalera_switch
      - sensor.check_switch_suite_switch
      - sensor.check_switch_caseta_camara_det_mov
      - sensor.check_switch_piscina_camara_det_mov
      - sensor.check_switch_recibidor_camara_det_mov
      - sensor.check_input_boolean_despacho_sensor_movimiento
      - sensor.check_input_boolean_cocina_sensor_puerta
      - sensor.check_input_boolean_cocina_sensor_persiana
      - sensor.check_switch_holiday
      - sensor.check_switch_ups_beeper
      - sensor.check_group_seguridad
      - sensor.check_outside_fence_switch
      - sensor.check_sensor_cocina_sensor_persiana
      - sensor.check_sensor_cocina_sensor_puerta

intent_script:
  ##############################################
  # Heating intents
  ##############################################
  heating.check:
    speech:
      text: >
        {%- set status ={"on": "conectada", "off": "desconectada"} -%}
        La calefacción está {{ status[states("switch.thermostat")] }}. {% if is_state("switch.thermostat", "on") %}{% if states("climate.termostato") != "0"%} A una temperatura de {{ states.climate.termostato.attributes.temperature}} grados.{% endif -%} {% if is_state_attr("climate.termostato", "operation_mode", "idle") %} No está en marcha{%- else %} Está en marcha{% endif -%}{%- if is_state("switch.thermostat_away_mode", "on") %} y tiene el modo ausente activado.  {%- else %} y tiene el modo ausente desactivado. {% endif %}{% endif %}

  heating.temperature.change.relative:
    speech:
      text: >
        {% if is_state("switch.thermostat", "on") %}¡Entendido!, voy a {{ change.direction }} la temperatura de la calefacción {{ change.degrees }} {{ unit | replace("?","") }}. Ahora está a {{ states.climate.termostato.attributes.temperature}} grados{% else %}¡Vaya!, No puedo {{ change.direction }} la calefacción porque está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.thermostat
        state: 'on'
      - service: climate.set_temperature
        data_template:
          entity_id: climate.termostato
          temperature: >
            {%- if change.direction == 'subir'-%}
              {{ states.climate.termostato.attributes.temperature + change.degrees | float }}
            {%- else -%}
              {{ states.climate.termostato.attributes.temperature - change.degrees | float }}
            {%- endif -%}

  heating.temperature.change.absolute:
    speech:
      text: >
        {% if is_state("switch.thermostat", "on") %}¡Perfecto! He cambiado la temperatura de la calefacción a {{ change.degrees }} grados. {% else %}¡Vaya!, No puedo {{ change.set }} la calefacción porque está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.thermostat
        state: 'on'
      - service: climate.set_temperature
        data_template:
          entity_id: climate.termostato
          temperature: '{{ change.degrees }}'

  heating.temperature.change.restore:
    speech:
      text: >
        {% if is_state("switch.thermostat", "on") %}¡Perfecto! Estoy restaurando la programación normal en la calefaccción. {% else %}¡Vaya!, la calefacción está desconectada{% endif %}
    async_action: false
    action:
      - condition: state
        entity_id: switch.thermostat
        state: 'on'
      - service_template: 'switch.turn_on'
        data_template:
          entity_id: 'switch.thermostat_away_mode'
      - delay:
          seconds: 2
      - service_template: 'switch.turn_off'
        data_template:
          entity_id: 'switch.thermostat_away_mode'

  ##############################################
  # Fence intents
  ##############################################
  fence.check:
    speech:
      text: >
        {%- set status ={"Abierta": "cerrarla", "Cerrada": "abrirla"} -%}
        La barrera está {{states("sensor.outside_fence")}}. ¿Quieres {{ status[states("sensor.outside_fence")] }}?

  ##############################################
  # Climate intents
  ##############################################
  climate.check:
    speech:
      text: >
        {% set locationPre,locationSensor = location.split(" ") %}
        {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_temperatura") != "unknown" -%}
          La temperatura en {{ location }} es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_temperatura") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_temperatura"].attributes.unit_of_measurement }} 
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_humedad") != "unknown" %} con una humedad del {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_humedad") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_humedad"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_max_temp") != "unknown" %} La temperatura máxima de hoy ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_max_temp") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_max_temp"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_min_temp") != "unknown" %} La temperatura mínima de hoy ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_min_temp") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_min_temp"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_co2") != "unknown" %} El nivel de C O 2 es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_co2") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_co2"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_ruido") != "unknown" %} El nivel de ruido es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_ruido") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_ruido"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_presion") != "unknown" %} La presión atmosférica es de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_termometro_presion") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_termometro_presion"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento") != "unknown" %} Las rachas de viento son de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_anemometro_velocidad_viento"].attributes.unit_of_measurement }}.{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") == "0" %} No está lloviendo.{% else %} Está lloviendo unos {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") == "0" %} No ha llovido durante la última hora.{% else %} La precipitación de la última hora ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_1"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
          {%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") != "unknown" %}{%- if states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") == "0" %} No ha llovido durante las últimas 24 horas.{% else %} La precipitación de las últimas 24 horas ha sido de {{ states("sensor." ~ locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24") }} {{states.sensor[locationSensor | replace("ó","o") ~ "_pluviometro_lluvia_24"].attributes.unit_of_measurement }}.{% endif %}{% endif %}
        {%- else -%}
          ¡Vaya! No tengo ningún sensor de temperatura en {{ location }}.
        {% endif %}

  ##############################################
  # Generic intents
  ##############################################
  device.turnOnOff:
    speech:
      text: >
        {% if (states.sensor["on_off_" ~ device | replace(".","_")] is not none) %}
          {% if targetState and (targetState == "on" or targetState == "off") %}
            {% if not is_state(device, targetState) %}
              He {{ states.sensor["on_off_" ~ device | replace(".","_")].state }} {{ states.sensor["on_off_" ~ device | replace(".","_")].attributes.friendly_name }}
            {% else %}
              Ya estaba {{ states.sensor["check_" ~ device | replace(".","_")].state }}. No he hecho nada.
            {% endif %}
          {% else %}
            He {{ states.sensor["on_off_" ~ device | replace(".","_")].state }} {{ states.sensor["on_off_" ~ device | replace(".","_")].attributes.friendly_name }}
          {% endif %}
        {% else %}
          ¡Vaya!. No puedo hacerlo.
        {% endif %}
    async_action: false
    action:
      - delay:
          milliseconds: 500
      - service_template: >
          {% if (states.sensor["on_off_" ~ device | replace(".","_")] is not none) %}
            {% if targetState and (targetState == "on" or targetState == "off") %}
              {% if not is_state(device | replace(".","_"), targetState) %}
                homeassistant.turn_{{targetState}}
              {% endif %}
            {% else %}
              homeassistant.toggle
            {% endif %}
          {% endif %}
  
        data_template:
          entity_id: '{{device}}'

  device.check:
    speech:
      text: >
        {%- set data ={"on-off": {"encendido": "apagarlo", "apagado": "encenderlo"},
                       "on-off-f": {"encendida": "apagarla", "apagada": "encenderla"},
                       "on-off-fp": {"encendidas": "apagarlas", "apagadas": "encenderlas"},
                       "open-close": {"abierta": "cerrarla", "cerrada": "abrirla"},
                       "connected-disconnected": {"conectado": "desconectarlo", "desconectado": "conectarlo"},
                       "enabled-disabled": {"activado": "desactivarlo", "desactivado": "activarlo"},
                       "none": "void"
                       } -%}
        {%- set targetState = data[states.sensor["check_" ~ device | replace(".","_")].attributes.unit_of_measurement] -%}
        {{ states.sensor["check_" ~ device | replace(".","_")].attributes.friendly_name }} está {{ states.sensor["check_" ~ device | replace(".","_")].state }}.
        {% if targetState != "void" %}
          ¿Quieres {{ targetState[states.sensor["check_" ~ device | replace(".","_")].state] }}?
        {% endif %}

  ##############################################
  # Various intents
  ##############################################
  authorized.person:
    speech:
      text: >
        {%- set timestamp = strptime(time, '%H:%M:%S')-%}
        {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
        {%- set minutes = (((as_timestamp(targetTime) - as_timestamp(now())) | int) / 60) | round | int -%}
        {%- if minutes > 0 -%}
          Activada persona autorizada durante {{ minutes }} minutos
        {%- else -%}
          No puedo activar una persona autorizada en el pasado.
        {%- endif -%}
    async_action: false
    action:
      - service_template: >
          {%- set timestamp = strptime(time, '%H:%M:%S')-%}
          {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
          {%- set minutes = (((as_timestamp(targetTime) - as_timestamp(now())) | int) / 60) | round | int -%}
          {%- if minutes > 0 -%}
            input_number.set_value
          {%- endif -%}

        data_template:
         entity_id: input_number.empty_home_activation_delay_minutes
         value: >
          {%- set timestamp = strptime(time, '%H:%M:%S')-%}
          {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
          {%- set minutes = (((as_timestamp(targetTime) - as_timestamp(now())) | int) / 60) | round -%}
          {%- if minutes > 0 -%}
            {{ minutes }}
          {%- endif -%}
      - service_template: >
          {%- set timestamp = strptime(time, '%H:%M:%S')-%}
          {%- set targetTime = now().replace(hour=timestamp.hour).replace(minute=timestamp.minute).replace(second=timestamp.second)-%}
          {%- set minutes = (((as_timestamp(targetTime) - as_timestamp(now())) | int) / 60) | round | int -%}
          {%- if minutes > 0 -%}
            homeassistant.turn_on
          {%- endif -%}

        data:
          entity_id: input_boolean.empty_home_activation_delay

  shift.geni.check:
    speech:
      text: >
       {%- if is_state("sensor.next_shift_event", "Saliente") -%}
         {{name_original}} está hoy saliente de noche
       {%- else -%}
         {% set diff = as_timestamp(states.calendar.turnos_geni_everything.attributes.start_time) - as_timestamp(now().replace(hour=0).replace(minute=0).replace(second=0).replace(microsecond=0)) %}
         {%- if diff < 86400 -%}
           {{name_original}} trabaja hoy por la {{ states("sensor.next_shift_event") }}
         {%- elif diff >= 86400 and diff < 86400*2 -%}
           {{name_original}} trabaja mañana por la {{ states("sensor.next_shift_event") }}
         {%- else -%}
           {{name_original}} trabaja el próximo {{ states("sensor.next_shift_date") }} por la {{ states("sensor.next_shift_event") }}
         {% endif %}
       {% endif %}

  presence.geni.check:
    speech:
      text: >
        {%- if is_state("device_tracker.geni_combined", "home") -%}
          Parece que {{name_original}} está en casa.
        {%- else -%}
          Pues parece que {{name_original}} no está en casa.
        {%- endif -%}

  goodnight.check:
    speech:
      text: >
        {%- if is_state("sensor.cocina_sensor_puerta", "Abierta") %}Puerta de la cocina abierta. {% endif -%}{%- if is_state("sensor.cocina_sensor_persiana", "Abierta") %}Persiana de la cocina abierta. {% endif -%}{% if is_state("sensor.outside_fence", "Abierta") %}Te has dejado la barrera abierta, la voy a cerrar. {% endif -%}Buenas noches.
    async_action: true
    action:
      # Only execute between 21:00 and 6:00
      - condition: time
        after: '21:00'
        before: '6:00'
      # Turn off stairs lights
      - service: switch.turn_on
        data:
          entity_id: switch.escalera_switch
      # Turn off outside lights
      - service: light.turn_off
        data:
          entity_id: group.luces_exteriores
      # Turn off hall lamp
      - service: switch.turn_off
        data:
          entity_id: switch.entrance_hall_lamp_switch
      # Close fence if open
      - service_template: >
          {%- if is_state("sensor.outside_fence", "Abierta") -%}
            homeassistant.turn_on
          {%- endif -%}

        data:
          entity_id: switch.barrera
      # Wait 1 minute before turning off stair lights
      - delay:
          minutes: 1
      # Turn off stairs lights
      - service: switch.turn_off
        data:
          entity_id: switch.escalera_switch

sensor:
- platform: template
  sensors:
    recibidor_termometro_temperatura:
      value_template: '{{ states.climate.termostato.attributes.current_temperature }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura del recibidor'

    exterior_termometro_temperatura:
      value_template: '{{ states("sensor.exterior_temperature") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura exterior'
    exterior_termometro_humedad:
      value_template: '{{ states("sensor.exterior_humidity") }}'
      unit_of_measurement: 'por ciento'
      friendly_name: 'la humedad exterior'
    exterior_termometro_max_temp:
      value_template: '{{ states("sensor.exterior_max_temp") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura máxmima de hoy en el exterior'
    exterior_termometro_min_temp:
      value_template: '{{ states("sensor.exterior_min_temp") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura mínima de hoy en el exterior'
    salon_termometro_co2:
      value_template: '{{ states("sensor.salon_co2") }}'
      unit_of_measurement: 'partes por millón'
      friendly_name: 'el c o 2 en el salón'
    salon_termometro_temperatura:
      value_template: '{{ states("sensor.salon_temperature") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura en el salón'
    salon_termometro_humedad:
      value_template: '{{ states("sensor.salon_humidity") }}'
      unit_of_measurement: 'por ciento'
      friendly_name: 'la humedad en el salón'
    salon_termometro_max_temp:
      value_template: '{{ states("sensor.salon_max_temp") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura máxmima de hoy en el salón'
    salon_termometro_min_temp:
      value_template: '{{ states("sensor.salon_min_temp") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura mínima de hoy en el salón'
    salon_termometro_ruido:
      value_template: '{{ states("sensor.salon_noise") }}'
      unit_of_measurement: 'decibelios'
      friendly_name: 'el nivel de ruido en el salón'
    salon_termometro_presion:
      value_template: '{{ states("sensor.salon_pressure") }}'
      unit_of_measurement: 'milibares'
      friendly_name: 'la presión atmosférica en el salón'
    suite_termometro_co2:
      value_template: '{{ states("sensor.suite_co2") }}'
      unit_of_measurement: 'partes por millón'
      friendly_name: 'el c o 2 en la suite'
    suite_termometro_temperatura:
      value_template: '{{ states("sensor.suite_temperature") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura en la suite'
    suite_termometro_humedad:
      value_template: '{{ states("sensor.suite_humidity") }}'
      unit_of_measurement: 'por ciento'
      friendly_name: 'la humedad en la suite'
    suite_termometro_max_temp:
      value_template: '{{ states("sensor.suite_max_temp") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura máxmima de hoy en la suite'
    suite_termometro_min_temp:
      value_template: '{{ states("sensor.suite_min_temp") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura mínima de hoy en la suite'
    habitacion_termometro_co2:
      value_template: '{{ states("sensor.habitacion_co2") }}'
      unit_of_measurement: 'partes por millón'
      friendly_name: 'el c o 2 en la habitación de los niños'
    habitacion_termometro_temperatura:
      value_template: '{{ states("sensor.habitacion_temperature") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura en la habitación de los niños'
    habitacion_termometro_humedad:
      value_template: '{{ states("sensor.habitacion_humidity") }}'
      unit_of_measurement: 'por ciento'
      friendly_name: 'la humedad en la habitación de los niños'
    habitacion_termometro_max_temp:
      value_template: '{{ states("sensor.habitacion_max_temp") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura máxmima de hoy en la habitación de los niños'
    habitacion_termometro_min_temp:
      value_template: '{{ states("sensor.habitacion_min_temp") }}'
      unit_of_measurement: 'grados'
      friendly_name: 'la temperatura mínima de hoy en la habitación de los niños'

    exterior_pluviometro_lluvia:
      value_template: '{{ states("sensor.pluviometro_rain") }}'
      unit_of_measurement: 'milímetros'
    exterior_pluviometro_lluvia_1:
      value_template: '{{ states("sensor.pluviometro_sum_rain_1") }}'
      unit_of_measurement: 'milímetros'
    exterior_pluviometro_lluvia_24:
      value_template: '{{ states("sensor.pluviometro_sum_rain_24") }}'
      unit_of_measurement: 'milímetros'

    exterior_anemometro_velocidad_viento:
      value_template: '{{ states("sensor.anemometro_gust_strength") }}'
      unit_of_measurement: 'kilómetros por hora'
      friendly_name: 'las rachas de viento'

    # api.ai on/off entities
    on_off_switch_termostato:
      value_template: '{% if is_state("switch.thermostat", "off") %}encendido{% else %}apagado{% endif %}'
      friendly_name: 'el termostato'
    on_off_switch_thermostat_away_mode:
      value_template: '{% if is_state("switch.thermostat_away_mode", "off") %}activado{% else %}desactivado{% endif %}'
      friendly_name: 'el modo ausente en la calefacción'
    on_off_switch_piscina:
      value_template: '{% if is_state("switch.motor_piscina", "off") %}encendido{% else %}apagado{% endif %}'
      friendly_name: 'el motor de la piscina'
    on_off_group_luces_exteriores:
      value_template: '{% if is_state("group.luces_exteriores", "off") %}encendido{% else %}apagado{% endif %}'
      friendly_name: 'las luces exteriores'
    on_off_group_luces_interiores:
      value_template: '{% if is_state("group.luces_interiores", "off") %}encendido{% else %}apagado{% endif %}'
      friendly_name: 'las luces interiores'
    on_off_switch_entrance_hall_lamp_switch:
      value_template: '{% if is_state("switch.entrance_hall_lamp_switch", "off") %}encendido{% else %}apagado{% endif %}'
      friendly_name: 'la lámpara del recibidor'
    on_off_switch_escalera_switch:
      value_template: '{% if is_state("switch.escalera_switch", "off") %}encendido{% else %}apagado{% endif %}'
      friendly_name: 'las luces de la escalera'
    on_off_switch_suite_switch:
      value_template: '{% if is_state("switch.suite_switch", "off") %}encendido{% else %}apagado{% endif %}'
      friendly_name: 'la luz de la suite'
    on_off_switch_caseta_camara_det_mov:
      value_template: '{% if is_state("switch.caseta_camara_det_mov", "off") %}activado{% else %}desactivado{% endif %}'
      friendly_name: 'el detector de movimiento de la caseta'
    on_off_switch_piscina_camara_det_mov:
      value_template: '{% if is_state("switch.piscina_camara_det_mov", "off") %}activado{% else %}desactivado{% endif %}'
      friendly_name: 'el detector de movimiento de la piscina'
    on_off_switch_recibidor_camara_det_mov:
      value_template: '{% if is_state("switch.recibidor_camara_det_mov", "off") %}activado{% else %}desactivado{% endif %}'
      friendly_name: 'el detector de movimiento del recibidor'
    on_off_input_boolean_despacho_sensor_movimiento:
      value_template: '{% if is_state("input_boolean.despacho_sensor_movimiento", "off") %}activado{% else %}desactivado{% endif %}'
      friendly_name: 'el detector de movimiento del salón'
    on_off_input_boolean_cocina_sensor_puerta:
      value_template: '{% if is_state("input_boolean.cocina_sensor_puerta", "off") %}conectado{% else %}desconectado{% endif %}'
      friendly_name: 'el sensor de apertura de la puerta de la cocina'
    on_off_input_boolean_cocina_sensor_persiana:
      value_template: '{% if is_state("input_boolean.cocina_sensor_persiana", "off") %}conectado{% else %}desconectado{% endif %}'
      friendly_name: 'el sensor de apertura de la persiana de la cocina'
    on_off_switch_holiday:
      value_template: '{% if is_state("switch.holiday", "off") %}activado{% else %}desactivado{% endif %}'
      friendly_name: 'el modo vacaciones'
    on_off_switch_ups_beeper:
      value_template: '{% if is_state("switch.ups_beeper", "off") %}conectado{% else %}desconectado{% endif %}'
      friendly_name: 'el pitido del SAI'
    on_off_group_seguridad:
      value_template: '{% if is_state("group.seguridad", "off") %}conectado{% else %}desconectado{% endif %}'
      friendly_name: 'el sistema de seguridad'
    on_off_outside_fence_switch:
      value_template: '{% if is_state("sensor.outside_fence", "Cerrada") %}abierto{% else %}cerrado{% endif %}'
      friendly_name: 'la barrera'

    # api.ai check entities
    check_switch_termostato:
      value_template: '{% if is_state("switch.thermostat", "off") %}apagado{% else %}encendido{% endif %}'
      friendly_name: 'el termostato'
      unit_of_measurement: 'on-off'
    check_switch_thermostat_away_mode:
      value_template: '{% if is_state("switch.thermostat_away_mode", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el modo ausente en la calefacción'
      unit_of_measurement: 'enabled-disabled'
    check_switch_piscina:
      value_template: '{% if is_state("switch.motor_piscina", "off") %}apagado{% else %}encendido{% endif %}'
      friendly_name: 'el motor de la piscina'
      unit_of_measurement: 'on-off'
    check_group_luces_exteriores:
      value_template: '{% if is_state("group.luces_exteriores", "off") %}apagadas{% else %}encendidas{% endif %}'
      friendly_name: 'las luces exteriores'
      unit_of_measurement: 'on-off-fp'
    check_group_luces_interiores:
      value_template: '{% if is_state("group.luces_interiores", "off") %}apagadas{% else %}encendidas{% endif %}'
      friendly_name: 'las luces interiores'
      unit_of_measurement: 'on-off-fp'
    check_switch_entrance_hall_lamp_switch:
      value_template: '{% if is_state("switch.entrance_hall_lamp_switch", "off") %}apagada{% else %}encendida{% endif %}'
      friendly_name: 'la lámpara del recibidor'
      unit_of_measurement: 'on-off-f'
    check_switch_escalera_switch:
      value_template: '{% if is_state("switch.escalera_switch", "off") %}apagadas{% else %}encendidas{% endif %}'
      friendly_name: 'las luces de la escalera'
      unit_of_measurement: 'on-off-fp'
    check_switch_suite_switch:
      value_template: '{% if is_state("switch.suite_switch", "off") %}apagada{% else %}encendida{% endif %}'
      friendly_name: 'la luz de la suite'
      unit_of_measurement: 'on-off-f'
    check_switch_caseta_camara_det_mov:
      value_template: '{% if is_state("switch.caseta_camara_det_mov", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el detector de movimiento de la caseta'
      unit_of_measurement: 'enabled-disabled'
    check_switch_piscina_camara_det_mov:
      value_template: '{% if is_state("switch.piscina_camara_det_mov", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el detector de movimiento de la piscina'
      unit_of_measurement: 'enabled-disabled'
    check_switch_recibidor_camara_det_mov:
      value_template: '{% if is_state("switch.recibidor_camara_det_mov", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el detector de movimiento del recibidor'
      unit_of_measurement: 'enabled-disabled'
    check_input_boolean_despacho_sensor_movimiento:
      value_template: '{% if is_state("input_boolean.despacho_sensor_movimiento", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el detector de movimiento del salón'
      unit_of_measurement: 'enabled-disabled'
    check_input_boolean_cocina_sensor_puerta:
      value_template: '{% if is_state("input_boolean.cocina_sensor_puerta", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el sensor de apertura de la puerta de la cocina'
      unit_of_measurement: 'enabled-disabled'
    check_input_boolean_cocina_sensor_persiana:
      value_template: '{% if is_state("input_boolean.cocina_sensor_persiana", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el sensor de apertura de la persiana de la cocina'
      unit_of_measurement: 'enabled-disabled'
    check_switch_holiday:
      value_template: '{% if is_state("switch.holiday", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el modo vacaciones'
      unit_of_measurement: 'enabled-disabled'
    check_switch_ups_beeper:
      value_template: '{% if is_state("switch.ups_beeper", "off") %}desactivado{% else %}activado{% endif %}'
      friendly_name: 'el pitido del SAI'
      unit_of_measurement: 'enabled-disabled'
    check_group_seguridad:
      value_template: '{% if is_state("group.seguridad", "off") %}desconectado{% else %}conectado{% endif %}'
      friendly_name: 'el sistema de seguridad'
      unit_of_measurement: 'connected-disconnected'
    check_outside_fence_switch:
      value_template: '{% if is_state("sensor.outside_fence", "Cerrada") %}cerrada{% else %}abierta{% endif %}'
      friendly_name: 'la barrera'
      unit_of_measurement: 'open-close'
    check_sensor_cocina_sensor_persiana:
      value_template: '{% if is_state("sensor.cocina_sensor_persiana", "Cerrada") %}cerrada{% else %}abierta{% endif %}'
      friendly_name: 'la persiana de la cocina'
      unit_of_measurement: 'none'
    check_sensor_cocina_sensor_puerta:
      value_template: '{% if is_state("sensor.cocina_sensor_puerta", "Cerrada") %}cerrada{% else %}abierta{% endif %}'
      friendly_name: 'la puerta de la cocina'
      unit_of_measurement: 'none'
